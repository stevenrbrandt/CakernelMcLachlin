# File produced by Kranc


STORAGE: ML_cons_detg[1]

STORAGE: ML_cons_Gamma[1]

STORAGE: ML_cons_traceA[1]

STORAGE: ML_Ham[1]

STORAGE: ML_mom[1]

if (timelevels == 1)
{
  STORAGE: ML_curv[1]
}
if (timelevels == 2)
{
  STORAGE: ML_curv[2]
}
if (timelevels == 3)
{
  STORAGE: ML_curv[3]
}
if (timelevels == 4)
{
  STORAGE: ML_curv[4]
}

if (timelevels == 1)
{
  STORAGE: ML_dtlapse[1]
}
if (timelevels == 2)
{
  STORAGE: ML_dtlapse[2]
}
if (timelevels == 3)
{
  STORAGE: ML_dtlapse[3]
}
if (timelevels == 4)
{
  STORAGE: ML_dtlapse[4]
}

if (timelevels == 1)
{
  STORAGE: ML_dtshift[1]
}
if (timelevels == 2)
{
  STORAGE: ML_dtshift[2]
}
if (timelevels == 3)
{
  STORAGE: ML_dtshift[3]
}
if (timelevels == 4)
{
  STORAGE: ML_dtshift[4]
}

if (timelevels == 1)
{
  STORAGE: ML_Gamma[1]
}
if (timelevels == 2)
{
  STORAGE: ML_Gamma[2]
}
if (timelevels == 3)
{
  STORAGE: ML_Gamma[3]
}
if (timelevels == 4)
{
  STORAGE: ML_Gamma[4]
}

if (timelevels == 1)
{
  STORAGE: ML_lapse[1]
}
if (timelevels == 2)
{
  STORAGE: ML_lapse[2]
}
if (timelevels == 3)
{
  STORAGE: ML_lapse[3]
}
if (timelevels == 4)
{
  STORAGE: ML_lapse[4]
}

if (timelevels == 1)
{
  STORAGE: ML_log_confac[1]
}
if (timelevels == 2)
{
  STORAGE: ML_log_confac[2]
}
if (timelevels == 3)
{
  STORAGE: ML_log_confac[3]
}
if (timelevels == 4)
{
  STORAGE: ML_log_confac[4]
}

if (timelevels == 1)
{
  STORAGE: ML_metric[1]
}
if (timelevels == 2)
{
  STORAGE: ML_metric[2]
}
if (timelevels == 3)
{
  STORAGE: ML_metric[3]
}
if (timelevels == 4)
{
  STORAGE: ML_metric[4]
}

if (timelevels == 1)
{
  STORAGE: ML_shift[1]
}
if (timelevels == 2)
{
  STORAGE: ML_shift[2]
}
if (timelevels == 3)
{
  STORAGE: ML_shift[3]
}
if (timelevels == 4)
{
  STORAGE: ML_shift[4]
}

if (timelevels == 1)
{
  STORAGE: ML_trace_curv[1]
}
if (timelevels == 2)
{
  STORAGE: ML_trace_curv[2]
}
if (timelevels == 3)
{
  STORAGE: ML_trace_curv[3]
}
if (timelevels == 4)
{
  STORAGE: ML_trace_curv[4]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_curvrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_curvrhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_curvrhs[3]
}
if (rhs_timelevels == 4)
{
  STORAGE: ML_curvrhs[4]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_dtlapserhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_dtlapserhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_dtlapserhs[3]
}
if (rhs_timelevels == 4)
{
  STORAGE: ML_dtlapserhs[4]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_dtshiftrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_dtshiftrhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_dtshiftrhs[3]
}
if (rhs_timelevels == 4)
{
  STORAGE: ML_dtshiftrhs[4]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_Gammarhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_Gammarhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_Gammarhs[3]
}
if (rhs_timelevels == 4)
{
  STORAGE: ML_Gammarhs[4]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_lapserhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_lapserhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_lapserhs[3]
}
if (rhs_timelevels == 4)
{
  STORAGE: ML_lapserhs[4]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_log_confacrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_log_confacrhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_log_confacrhs[3]
}
if (rhs_timelevels == 4)
{
  STORAGE: ML_log_confacrhs[4]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_metricrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_metricrhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_metricrhs[3]
}
if (rhs_timelevels == 4)
{
  STORAGE: ML_metricrhs[4]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_shiftrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_shiftrhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_shiftrhs[3]
}
if (rhs_timelevels == 4)
{
  STORAGE: ML_shiftrhs[4]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_trace_curvrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_trace_curvrhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_trace_curvrhs[3]
}
if (rhs_timelevels == 4)
{
  STORAGE: ML_trace_curvrhs[4]
}

schedule ML_BSSN_O8_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ML_BSSN_O8_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule ML_BSSN_O8_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"


if (CCTK_EQUALS(my_initial_data, "Minkowski"))
{
  schedule ML_BSSN_O8_Minkowski IN ADMBase_InitialData
  {
    LANG: C
  } "ML_BSSN_O8_Minkowski"
}


if (CCTK_EQUALS(my_initial_data, "ADMBase"))
{
  schedule ML_BSSN_O8_convertFromADMBase AT initial AFTER ADMBase_PostInitial
  {
    LANG: C
  } "ML_BSSN_O8_convertFromADMBase"
}


if (CCTK_EQUALS(my_initial_data, "ADMBase"))
{
  schedule ML_BSSN_O8_convertFromADMBaseGamma AT initial AFTER ML_BSSN_O8_convertFromADMBase
  {
    LANG: C
    SYNC: ML_dtlapse
    SYNC: ML_dtshift
    SYNC: ML_Gamma
  } "ML_BSSN_O8_convertFromADMBaseGamma"
}

schedule ML_BSSN_O8_RHS IN NoSuchGroup
{
  LANG: C
} "ML_BSSN_O8_RHS"

schedule ML_BSSN_O8_RHS1 IN ML_BSSN_O8_evolCalcGroup
{
  LANG: C
} "ML_BSSN_O8_RHS1"

schedule ML_BSSN_O8_RHS2 IN ML_BSSN_O8_evolCalcGroup
{
  LANG: C
} "ML_BSSN_O8_RHS2"


if (CCTK_EQUALS(my_rhs_boundary_condition, "static"))
{
  schedule ML_BSSN_O8_RHSStaticBoundary IN MoL_CalcRHS
  {
    LANG: C
  } "ML_BSSN_O8_RHSStaticBoundary"
}


if (CCTK_EQUALS(my_rhs_boundary_condition, "radiative"))
{
  schedule ML_BSSN_O8_RHSRadiativeBoundary IN MoL_CalcRHS
  {
    LANG: C
  } "ML_BSSN_O8_RHSRadiativeBoundary"
}

schedule ML_BSSN_O8_enforce IN MoL_PostStep BEFORE ML_BSSN_O8_SelectBoundConds
{
  LANG: C
} "ML_BSSN_O8_enforce"


if (CCTK_EQUALS(my_boundary_condition, "Minkowski"))
{
  schedule ML_BSSN_O8_boundary IN MoL_PostStep
  {
    LANG: C
  } "ML_BSSN_O8_boundary"
}

schedule ML_BSSN_O8_convertToADMBase IN ML_BSSN_O8_convertToADMBaseGroup
{
  LANG: C
} "ML_BSSN_O8_convertToADMBase"


if (CCTK_EQUALS(dt_lapse_shift_method, "correct"))
{
  schedule ML_BSSN_O8_convertToADMBaseDtLapseShift IN ML_BSSN_O8_convertToADMBaseGroup
  {
    LANG: C
    SYNC: ADMBase::dtlapse
    SYNC: ADMBase::dtshift
  } "ML_BSSN_O8_convertToADMBaseDtLapseShift"
}


if (CCTK_EQUALS(dt_lapse_shift_method, "correct"))
{
  schedule ML_BSSN_O8_convertToADMBaseDtLapseShiftBoundary IN ML_BSSN_O8_convertToADMBaseGroup
  {
    LANG: C
  } "ML_BSSN_O8_convertToADMBaseDtLapseShiftBoundary"
}


if (CCTK_EQUALS(dt_lapse_shift_method, "noLapseShiftAdvection"))
{
  schedule ML_BSSN_O8_convertToADMBaseFakeDtLapseShift IN ML_BSSN_O8_convertToADMBaseGroup
  {
    LANG: C
  } "ML_BSSN_O8_convertToADMBaseFakeDtLapseShift"
}

schedule ML_BSSN_O8_constraints IN ML_BSSN_O8_constraintsCalcGroup
{
  LANG: C
  SYNC: ML_cons_detg
  SYNC: ML_cons_Gamma
  SYNC: ML_cons_traceA
  SYNC: ML_Ham
  SYNC: ML_mom
} "ML_BSSN_O8_constraints"

schedule ML_BSSN_O8_constraints_boundary IN ML_BSSN_O8_constraintsCalcGroup AFTER ML_BSSN_O8_constraints
{
  LANG: C
} "ML_BSSN_O8_constraints_boundary"

schedule ML_BSSN_O8_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: ML_curv
  SYNC: ML_dtlapse
  SYNC: ML_dtshift
  SYNC: ML_Gamma
  SYNC: ML_lapse
  SYNC: ML_log_confac
  SYNC: ML_metric
  SYNC: ML_shift
  SYNC: ML_trace_curv
} "select boundary conditions"

schedule ML_BSSN_O8_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule group ApplyBCs as ML_BSSN_O8_ApplyBCs in MoL_PostStep  after ML_BSSN_O8_SelectBoundConds
{
  # no language specified
} "Apply boundary conditions controlled by thorn Boundary"
