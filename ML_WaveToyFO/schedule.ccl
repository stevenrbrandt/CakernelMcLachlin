# File produced by Kranc


if (other_timelevels == 1)
{
  STORAGE: WT_w[1]
}

if (timelevels == 1)
{
  STORAGE: WT_rho[1]
}
if (timelevels == 2)
{
  STORAGE: WT_rho[2]
}

if (timelevels == 1)
{
  STORAGE: WT_u[1]
}
if (timelevels == 2)
{
  STORAGE: WT_u[2]
}

if (timelevels == 1)
{
  STORAGE: WT_v[1]
}
if (timelevels == 2)
{
  STORAGE: WT_v[2]
}

if (rhs_timelevels == 1)
{
  STORAGE: WT_rhorhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: WT_rhorhs[2]
}

if (rhs_timelevels == 1)
{
  STORAGE: WT_urhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: WT_urhs[2]
}

if (rhs_timelevels == 1)
{
  STORAGE: WT_vrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: WT_vrhs[2]
}

schedule ML_WaveToyFO_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ML_WaveToyFO_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

schedule WTFO_Gaussian AT initial
{
  LANG: C
  WRITES:   ML_WaveToyFO::rho
  WRITES:   ML_WaveToyFO::u
  WRITES:   ML_WaveToyFO::v1
  WRITES:   ML_WaveToyFO::v2
  WRITES:   ML_WaveToyFO::v3
} "WTFO_Gaussian"

schedule WTFO_RHS IN MoL_CalcRHS
{
  LANG: C
  READS:    ML_WaveToyFO::rho
  READS:    ML_WaveToyFO::v1
  READS:    ML_WaveToyFO::v2
  READS:    ML_WaveToyFO::v3
  WRITES:   ML_WaveToyFO::rhorhs
  WRITES:   ML_WaveToyFO::urhs
  WRITES:   ML_WaveToyFO::v1rhs
  WRITES:   ML_WaveToyFO::v2rhs
  WRITES:   ML_WaveToyFO::v3rhs
} "WTFO_RHS"

schedule WTFO_RHS AT analysis
{
  LANG: C
  SYNC: WT_rhorhs
  SYNC: WT_urhs
  SYNC: WT_vrhs
  READS:    ML_WaveToyFO::rho
  READS:    ML_WaveToyFO::v1
  READS:    ML_WaveToyFO::v2
  READS:    ML_WaveToyFO::v3
  WRITES:   ML_WaveToyFO::rhorhs
  WRITES:   ML_WaveToyFO::urhs
  WRITES:   ML_WaveToyFO::v1rhs
  WRITES:   ML_WaveToyFO::v2rhs
  WRITES:   ML_WaveToyFO::v3rhs
} "WTFO_RHS"

schedule WTFO_constraints AT analysis
{
  LANG: C
  SYNC: WT_w
  READS:    ML_WaveToyFO::v1
  READS:    ML_WaveToyFO::v2
  READS:    ML_WaveToyFO::v3
  WRITES:   ML_WaveToyFO::w1
  WRITES:   ML_WaveToyFO::w2
  WRITES:   ML_WaveToyFO::w3
} "WTFO_constraints"

schedule ML_WaveToyFO_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: WT_rho
  SYNC: WT_u
  SYNC: WT_v
} "select boundary conditions"

schedule ML_WaveToyFO_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule ML_WaveToyFO_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule group ApplyBCs as ML_WaveToyFO_ApplyBCs in MoL_PostStep after ML_WaveToyFO_SelectBoundConds
{
  # no language specified
} "Apply boundary conditions controlled by thorn Boundary"
