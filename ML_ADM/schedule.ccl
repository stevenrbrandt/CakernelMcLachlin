# File produced by Kranc


if (other_timelevels == 1)
{
  STORAGE: ML_Ham[1]
}

if (other_timelevels == 1)
{
  STORAGE: ML_mom[1]
}

if (timelevels == 1)
{
  STORAGE: ML_curv[1]
}
if (timelevels == 2)
{
  STORAGE: ML_curv[2]
}
if (timelevels == 3)
{
  STORAGE: ML_curv[3]
}

if (timelevels == 1)
{
  STORAGE: ML_lapse[1]
}
if (timelevels == 2)
{
  STORAGE: ML_lapse[2]
}
if (timelevels == 3)
{
  STORAGE: ML_lapse[3]
}

if (timelevels == 1)
{
  STORAGE: ML_metric[1]
}
if (timelevels == 2)
{
  STORAGE: ML_metric[2]
}
if (timelevels == 3)
{
  STORAGE: ML_metric[3]
}

if (timelevels == 1)
{
  STORAGE: ML_shift[1]
}
if (timelevels == 2)
{
  STORAGE: ML_shift[2]
}
if (timelevels == 3)
{
  STORAGE: ML_shift[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_curvrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_curvrhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_curvrhs[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_lapserhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_lapserhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_lapserhs[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_metricrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_metricrhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_metricrhs[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_shiftrhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: ML_shiftrhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: ML_shiftrhs[3]
}

schedule ML_ADM_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ML_ADM_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"


if (CCTK_EQUALS(my_initial_data, "Minkowski"))
{
  schedule ML_ADM_Minkowski IN ADMBase_InitialData
  {
    LANG: C
    WRITES:   ML_ADM::alpha
    WRITES:   ML_ADM::beta1
    WRITES:   ML_ADM::beta2
    WRITES:   ML_ADM::beta3
    WRITES:   ML_ADM::g11
    WRITES:   ML_ADM::g12
    WRITES:   ML_ADM::g13
    WRITES:   ML_ADM::g22
    WRITES:   ML_ADM::g23
    WRITES:   ML_ADM::g33
    WRITES:   ML_ADM::K11
    WRITES:   ML_ADM::K12
    WRITES:   ML_ADM::K13
    WRITES:   ML_ADM::K22
    WRITES:   ML_ADM::K23
    WRITES:   ML_ADM::K33
  } "ML_ADM_Minkowski"
}


if (CCTK_EQUALS(my_initial_data, "ADMBase"))
{
  schedule ML_ADM_convertFromADMBase AT initial AFTER ADMBase_PostInitial
  {
    LANG: C
    READS:    ADMBase::alp
    READS:    ADMBase::betax
    READS:    ADMBase::betay
    READS:    ADMBase::betaz
    READS:    ADMBase::gxx
    READS:    ADMBase::gxy
    READS:    ADMBase::gxz
    READS:    ADMBase::gyy
    READS:    ADMBase::gyz
    READS:    ADMBase::gzz
    READS:    ADMBase::kxx
    READS:    ADMBase::kxy
    READS:    ADMBase::kxz
    READS:    ADMBase::kyy
    READS:    ADMBase::kyz
    READS:    ADMBase::kzz
    WRITES:   ML_ADM::alpha
    WRITES:   ML_ADM::beta1
    WRITES:   ML_ADM::beta2
    WRITES:   ML_ADM::beta3
    WRITES:   ML_ADM::g11
    WRITES:   ML_ADM::g12
    WRITES:   ML_ADM::g13
    WRITES:   ML_ADM::g22
    WRITES:   ML_ADM::g23
    WRITES:   ML_ADM::g33
    WRITES:   ML_ADM::K11
    WRITES:   ML_ADM::K12
    WRITES:   ML_ADM::K13
    WRITES:   ML_ADM::K22
    WRITES:   ML_ADM::K23
    WRITES:   ML_ADM::K33
  } "ML_ADM_convertFromADMBase"
}

schedule ML_ADM_RHS IN MoL_CalcRHS
{
  LANG: C
  READS:    ML_ADM::alpha
  READS:    ML_ADM::beta1
  READS:    ML_ADM::beta2
  READS:    ML_ADM::beta3
  READS:    ML_ADM::g11
  READS:    ML_ADM::g12
  READS:    ML_ADM::g13
  READS:    ML_ADM::g22
  READS:    ML_ADM::g23
  READS:    ML_ADM::g33
  READS:    ML_ADM::K11
  READS:    ML_ADM::K12
  READS:    ML_ADM::K13
  READS:    ML_ADM::K22
  READS:    ML_ADM::K23
  READS:    ML_ADM::K33
  WRITES:   ML_ADM::alpharhs
  WRITES:   ML_ADM::beta1rhs
  WRITES:   ML_ADM::beta2rhs
  WRITES:   ML_ADM::beta3rhs
  WRITES:   ML_ADM::g11rhs
  WRITES:   ML_ADM::g12rhs
  WRITES:   ML_ADM::g13rhs
  WRITES:   ML_ADM::g22rhs
  WRITES:   ML_ADM::g23rhs
  WRITES:   ML_ADM::g33rhs
  WRITES:   ML_ADM::K11rhs
  WRITES:   ML_ADM::K12rhs
  WRITES:   ML_ADM::K13rhs
  WRITES:   ML_ADM::K22rhs
  WRITES:   ML_ADM::K23rhs
  WRITES:   ML_ADM::K33rhs
} "ML_ADM_RHS"

schedule ML_ADM_RHS AT analysis
{
  LANG: C
  SYNC: ML_curvrhs
  SYNC: ML_lapserhs
  SYNC: ML_metricrhs
  SYNC: ML_shiftrhs
  READS:    ML_ADM::alpha
  READS:    ML_ADM::beta1
  READS:    ML_ADM::beta2
  READS:    ML_ADM::beta3
  READS:    ML_ADM::g11
  READS:    ML_ADM::g12
  READS:    ML_ADM::g13
  READS:    ML_ADM::g22
  READS:    ML_ADM::g23
  READS:    ML_ADM::g33
  READS:    ML_ADM::K11
  READS:    ML_ADM::K12
  READS:    ML_ADM::K13
  READS:    ML_ADM::K22
  READS:    ML_ADM::K23
  READS:    ML_ADM::K33
  WRITES:   ML_ADM::alpharhs
  WRITES:   ML_ADM::beta1rhs
  WRITES:   ML_ADM::beta2rhs
  WRITES:   ML_ADM::beta3rhs
  WRITES:   ML_ADM::g11rhs
  WRITES:   ML_ADM::g12rhs
  WRITES:   ML_ADM::g13rhs
  WRITES:   ML_ADM::g22rhs
  WRITES:   ML_ADM::g23rhs
  WRITES:   ML_ADM::g33rhs
  WRITES:   ML_ADM::K11rhs
  WRITES:   ML_ADM::K12rhs
  WRITES:   ML_ADM::K13rhs
  WRITES:   ML_ADM::K22rhs
  WRITES:   ML_ADM::K23rhs
  WRITES:   ML_ADM::K33rhs
} "ML_ADM_RHS"


if (CCTK_EQUALS(my_boundary_condition, "Minkowski"))
{
  schedule ML_ADM_boundary IN MoL_PostStep
  {
    LANG: C
    WRITES:   ML_ADM::alpha
    WRITES:   ML_ADM::beta1
    WRITES:   ML_ADM::beta2
    WRITES:   ML_ADM::beta3
    WRITES:   ML_ADM::g11
    WRITES:   ML_ADM::g12
    WRITES:   ML_ADM::g13
    WRITES:   ML_ADM::g22
    WRITES:   ML_ADM::g23
    WRITES:   ML_ADM::g33
    WRITES:   ML_ADM::K11
    WRITES:   ML_ADM::K12
    WRITES:   ML_ADM::K13
    WRITES:   ML_ADM::K22
    WRITES:   ML_ADM::K23
    WRITES:   ML_ADM::K33
  } "ML_ADM_boundary"
}

schedule ML_ADM_convertToADMBase IN MoL_PostStep AFTER ML_ADM_ApplyBCs
{
  LANG: C
  READS:    ML_ADM::alpha
  READS:    ML_ADM::beta1
  READS:    ML_ADM::beta2
  READS:    ML_ADM::beta3
  READS:    ML_ADM::g11
  READS:    ML_ADM::g12
  READS:    ML_ADM::g13
  READS:    ML_ADM::g22
  READS:    ML_ADM::g23
  READS:    ML_ADM::g33
  READS:    ML_ADM::K11
  READS:    ML_ADM::K12
  READS:    ML_ADM::K13
  READS:    ML_ADM::K22
  READS:    ML_ADM::K23
  READS:    ML_ADM::K33
  WRITES:   ADMBase::alp
  WRITES:   ADMBase::betax
  WRITES:   ADMBase::betay
  WRITES:   ADMBase::betaz
  WRITES:   ADMBase::dtalp
  WRITES:   ADMBase::dtbetax
  WRITES:   ADMBase::dtbetay
  WRITES:   ADMBase::dtbetaz
  WRITES:   ADMBase::gxx
  WRITES:   ADMBase::gxy
  WRITES:   ADMBase::gxz
  WRITES:   ADMBase::gyy
  WRITES:   ADMBase::gyz
  WRITES:   ADMBase::gzz
  WRITES:   ADMBase::kxx
  WRITES:   ADMBase::kxy
  WRITES:   ADMBase::kxz
  WRITES:   ADMBase::kyy
  WRITES:   ADMBase::kyz
  WRITES:   ADMBase::kzz
} "ML_ADM_convertToADMBase"

schedule ML_ADM_constraints AT analysis
{
  LANG: C
  SYNC: ML_Ham
  SYNC: ML_mom
  TRIGGERS: ML_Ham
  TRIGGERS: ML_mom
  READS:    ML_ADM::g11
  READS:    ML_ADM::g12
  READS:    ML_ADM::g13
  READS:    ML_ADM::g22
  READS:    ML_ADM::g23
  READS:    ML_ADM::g33
  READS:    ML_ADM::K11
  READS:    ML_ADM::K12
  READS:    ML_ADM::K13
  READS:    ML_ADM::K22
  READS:    ML_ADM::K23
  READS:    ML_ADM::K33
  WRITES:   ML_ADM::H
  WRITES:   ML_ADM::M1
  WRITES:   ML_ADM::M2
  WRITES:   ML_ADM::M3
} "ML_ADM_constraints"

schedule ML_ADM_constraints_boundary AT analysis AFTER ML_ADM_constraints
{
  LANG: C
  WRITES:   ML_ADM::H
  WRITES:   ML_ADM::M1
  WRITES:   ML_ADM::M2
  WRITES:   ML_ADM::M3
} "ML_ADM_constraints_boundary"

schedule ML_ADM_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: ML_curv
  SYNC: ML_lapse
  SYNC: ML_metric
  SYNC: ML_shift
} "select boundary conditions"

schedule ML_ADM_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule ML_ADM_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule group ApplyBCs as ML_ADM_ApplyBCs in MoL_PostStep after ML_ADM_SelectBoundConds
{
  # no language specified
} "Apply boundary conditions controlled by thorn Boundary"
