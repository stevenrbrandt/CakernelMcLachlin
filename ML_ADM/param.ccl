# File produced by user diener
# Produced with Mathematica Version 6.0 for Linux x86 (32-bit) (April 20, 2007)

# Mathematica script written by Ian Hinder and Sascha Husa


shares: GenericFD

USES CCTK_INT stencil_width
USES CCTK_INT stencil_width_x
USES CCTK_INT stencil_width_y
USES CCTK_INT stencil_width_z
USES CCTK_INT boundary_width


shares: MethodOfLines

USES CCTK_INT MoL_Num_Evolved_Vars
USES CCTK_INT MoL_Num_Constrained_Vars

restricted:
CCTK_REAL verbose "verbose"
{
  "*:*" :: ""
} 0

private:
KEYWORD my_initial_data "my_initial_data"
{
  "ADMBase" :: "ADMBase"
  "Minkowski" :: "Minkowski"
} "ADMBase"

private:
KEYWORD my_boundary_condition "my_boundary_condition"
{
  "none" :: "none"
  "Minkowski" :: "Minkowski"
} "none"

restricted:
CCTK_INT ML_ADM_MaxNumEvolvedVars "Number of evolved variables used by this thorn" ACCUMULATOR-BASE=MethodofLines::MoL_Num_Evolved_Vars
{
  16:16 :: "Number of evolved variables used by this thorn"
} 16

restricted:
CCTK_INT ML_ADM_MaxNumConstrainedVars "Number of constrained variables used by this thorn" ACCUMULATOR-BASE=MethodofLines::MoL_Num_Constrained_Vars
{
  38:38 :: "Number of constrained variables used by this thorn"
} 38

restricted:
CCTK_INT timelevels "Number of active timelevels"
{
  0:3 :: ""
} 3

restricted:
CCTK_INT ML_ADM_Minkowski_calc_every "ML_ADM_Minkowski_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_ADM_convertFromADMBase_calc_every "ML_ADM_convertFromADMBase_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_ADM_RHS_calc_every "ML_ADM_RHS_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_ADM_boundary_calc_every "ML_ADM_boundary_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_ADM_convertToADMBase_calc_every "ML_ADM_convertToADMBase_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_ADM_constraints_calc_every "ML_ADM_constraints_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_ADM_constraints_boundary_calc_every "ML_ADM_constraints_boundary_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_ADM_Minkowski_calc_offset "ML_ADM_Minkowski_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_ADM_convertFromADMBase_calc_offset "ML_ADM_convertFromADMBase_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_ADM_RHS_calc_offset "ML_ADM_RHS_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_ADM_boundary_calc_offset "ML_ADM_boundary_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_ADM_convertToADMBase_calc_offset "ML_ADM_convertToADMBase_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_ADM_constraints_calc_offset "ML_ADM_constraints_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_ADM_constraints_boundary_calc_offset "ML_ADM_constraints_boundary_calc_offset"
{
  *:* :: ""
} 0

private:
KEYWORD K11_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD K12_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD K13_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD K22_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD K23_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD K33_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD alpha_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD g11_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD g12_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD g13_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD g22_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD g23_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD g33_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD beta1_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD beta2_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD beta3_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ml_curv_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ml_lapse_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ml_metric_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ml_shift_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
CCTK_REAL K11_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL K12_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL K13_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL K22_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL K23_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL K33_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL alpha_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL g11_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL g12_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL g13_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL g22_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL g23_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL g33_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL beta1_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL beta2_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL beta3_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ml_curv_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ml_lapse_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ml_metric_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ml_shift_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL K11_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL K12_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL K13_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL K22_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL K23_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL K33_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL alpha_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL g11_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL g12_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL g13_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL g22_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL g23_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL g33_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL beta1_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL beta2_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL beta3_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ml_curv_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ml_lapse_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ml_metric_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ml_shift_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL K11_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL K12_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL K13_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL K22_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL K23_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL K33_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL alpha_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL g11_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL g12_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL g13_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL g22_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL g23_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL g33_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL beta1_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL beta2_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL beta3_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ml_curv_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ml_lapse_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ml_metric_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ml_shift_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

