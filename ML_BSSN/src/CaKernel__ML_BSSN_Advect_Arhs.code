#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define QAD(x) (SQR(SQR(x)))
#define INV(x) ((1.0) / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * (x) * (x))

CAKERNEL_ML_BSSN_Advect_Arhs_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  CCTK_REAL const dx = params.cagh_dx;
  CCTK_REAL const dy = params.cagh_dy;
  CCTK_REAL const dz = params.cagh_dz;
  CCTK_REAL const dt = params.cagh_dt;
  CCTK_REAL const t = params.cagh_time;
  CCTK_REAL const dxi = INV(dx);
  CCTK_REAL const dyi = INV(dy);
  CCTK_REAL const dzi = INV(dz);
  CCTK_REAL const khalf = 0.5;
  CCTK_REAL const kthird = 1/3.0;
  CCTK_REAL const ktwothird = 2.0/3.0;
  CCTK_REAL const kfourthird = 4.0/3.0;
  CCTK_REAL const keightthird = 8.0/3.0;
  CCTK_REAL const hdxi = 0.5 * dxi;
  CCTK_REAL const hdyi = 0.5 * dyi;
  CCTK_REAL const hdzi = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  CCTK_REAL const p1o1024dx = 0.0009765625*INV(dx);
  CCTK_REAL const p1o1024dy = 0.0009765625*INV(dy);
  CCTK_REAL const p1o1024dz = 0.0009765625*INV(dz);
  CCTK_REAL const p1o1680dx = 0.000595238095238095238095238095238*INV(dx);
  CCTK_REAL const p1o1680dy = 0.000595238095238095238095238095238*INV(dy);
  CCTK_REAL const p1o1680dz = 0.000595238095238095238095238095238*INV(dz);
  CCTK_REAL const p1o5040dx2 = 0.000198412698412698412698412698413*INV(SQR(dx));
  CCTK_REAL const p1o5040dy2 = 0.000198412698412698412698412698413*INV(SQR(dy));
  CCTK_REAL const p1o5040dz2 = 0.000198412698412698412698412698413*INV(SQR(dz));
  CCTK_REAL const p1o560dx = 0.00178571428571428571428571428571*INV(dx);
  CCTK_REAL const p1o560dy = 0.00178571428571428571428571428571*INV(dy);
  CCTK_REAL const p1o560dz = 0.00178571428571428571428571428571*INV(dz);
  CCTK_REAL const p1o705600dxdy = 1.41723356009070294784580498866e-6*INV(dx*dy);
  CCTK_REAL const p1o705600dxdz = 1.41723356009070294784580498866e-6*INV(dx*dz);
  CCTK_REAL const p1o705600dydz = 1.41723356009070294784580498866e-6*INV(dy*dz);
  CCTK_REAL const p1o840dx = 0.00119047619047619047619047619048*INV(dx);
  CCTK_REAL const p1o840dy = 0.00119047619047619047619047619048*INV(dy);
  CCTK_REAL const p1o840dz = 0.00119047619047619047619047619048*INV(dz);
  CCTK_REAL const p1odx = INV(dx);
  CCTK_REAL const p1ody = INV(dy);
  CCTK_REAL const p1odz = INV(dz);
  CCTK_REAL const pm1o840dx = -0.00119047619047619047619047619048*INV(dx);
  CCTK_REAL const pm1o840dy = -0.00119047619047619047619047619048*INV(dy);
  CCTK_REAL const pm1o840dz = -0.00119047619047619047619047619048*INV(dz);
  
  /* Assign local copies of arrays functions */
  
  
  
  /* Calculate temporaries and arrays functions */
  
  /* Copy local copies back to grid functions */
  CAKERNEL_ML_BSSN_Advect_Arhs_Computations_Begin
    
    /* Assign local copies of grid functions */
    
    CCTK_REAL AL = I3D(A,0,0,0);
    CCTK_REAL ArhsL = I3D(Arhs,0,0,0);
    CCTK_REAL beta1L = I3D(beta1,0,0,0);
    CCTK_REAL beta2L = I3D(beta2,0,0,0);
    CCTK_REAL beta3L = I3D(beta3,0,0,0);
    CCTK_REAL trKL = I3D(trK,0,0,0);
    
    
    /* Include user supplied include files */
    
    /* Precompute derivatives */
    CCTK_REAL const PDupwindNthAnti1A = PDupwindNthAnti1(A);
    CCTK_REAL const PDupwindNthSymm1A = PDupwindNthSymm1(A);
    CCTK_REAL const PDupwindNthAnti2A = PDupwindNthAnti2(A);
    CCTK_REAL const PDupwindNthSymm2A = PDupwindNthSymm2(A);
    CCTK_REAL const PDupwindNthAnti3A = PDupwindNthAnti3(A);
    CCTK_REAL const PDupwindNthSymm3A = PDupwindNthSymm3(A);
    CCTK_REAL const PDupwindNthAnti1trK = PDupwindNthAnti1(trK);
    CCTK_REAL const PDupwindNthSymm1trK = PDupwindNthSymm1(trK);
    CCTK_REAL const PDupwindNthAnti2trK = PDupwindNthAnti2(trK);
    CCTK_REAL const PDupwindNthSymm2trK = PDupwindNthSymm2(trK);
    CCTK_REAL const PDupwindNthAnti3trK = PDupwindNthAnti3(trK);
    CCTK_REAL const PDupwindNthSymm3trK = PDupwindNthSymm3(trK);
    
    /* Calculate temporaries and grid functions */
    ptrdiff_t dir1 = Sign(beta1L);
    
    ptrdiff_t dir2 = Sign(beta2L);
    
    ptrdiff_t dir3 = Sign(beta3L);
    
    ArhsL = ArhsL + ToReal(LapseACoeff)*(-((beta1L*PDupwindNthAnti1trK 
      + beta2L*PDupwindNthAnti2trK + beta3L*PDupwindNthAnti3trK + 
      PDupwindNthSymm1trK*fabs(beta1L) + PDupwindNthSymm2trK*fabs(beta2L) 
      + PDupwindNthSymm3trK*fabs(beta3L))*(-1 + 
      ToReal(LapseAdvectionCoeff))) + (beta1L*PDupwindNthAnti1A + 
      beta2L*PDupwindNthAnti2A + beta3L*PDupwindNthAnti3A + 
      PDupwindNthSymm1A*fabs(beta1L) + PDupwindNthSymm2A*fabs(beta2L) + 
      PDupwindNthSymm3A*fabs(beta3L))*ToReal(LapseAdvectionCoeff));
    
    /* Copy local copies back to grid functions */
    I3D(Arhs,0,0,0) = ArhsL;
    
  CAKERNEL_ML_BSSN_Advect_Arhs_Computations_End
  
CAKERNEL_ML_BSSN_Advect_Arhs_End
