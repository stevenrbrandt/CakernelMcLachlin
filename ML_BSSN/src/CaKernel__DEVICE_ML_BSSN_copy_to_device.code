#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define INV(x) ((CCTK_REAL)1.0 / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * SQR(x))
#define QAD(x) (SQR(SQR(x)))

CAKERNEL_DEVICE_ML_BSSN_copy_to_device_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  const CCTK_REAL dx CCTK_ATTRIBUTE_UNUSED = params.cagh_dx;
  const CCTK_REAL dy CCTK_ATTRIBUTE_UNUSED = params.cagh_dy;
  const CCTK_REAL dz CCTK_ATTRIBUTE_UNUSED = params.cagh_dz;
  const CCTK_REAL dt CCTK_ATTRIBUTE_UNUSED = params.cagh_dt;
  const CCTK_REAL t CCTK_ATTRIBUTE_UNUSED = params.cagh_time;
  const CCTK_REAL dxi CCTK_ATTRIBUTE_UNUSED = INV(dx);
  const CCTK_REAL dyi CCTK_ATTRIBUTE_UNUSED = INV(dy);
  const CCTK_REAL dzi CCTK_ATTRIBUTE_UNUSED = INV(dz);
  const CCTK_REAL khalf CCTK_ATTRIBUTE_UNUSED = 0.5;
  const CCTK_REAL kthird CCTK_ATTRIBUTE_UNUSED = 1/3.0;
  const CCTK_REAL ktwothird CCTK_ATTRIBUTE_UNUSED = 2.0/3.0;
  const CCTK_REAL kfourthird CCTK_ATTRIBUTE_UNUSED = 4.0/3.0;
  const CCTK_REAL keightthird CCTK_ATTRIBUTE_UNUSED = 8.0/3.0;
  const CCTK_REAL hdxi CCTK_ATTRIBUTE_UNUSED = 0.5 * dxi;
  const CCTK_REAL hdyi CCTK_ATTRIBUTE_UNUSED = 0.5 * dyi;
  const CCTK_REAL hdzi CCTK_ATTRIBUTE_UNUSED = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  const CCTK_REAL p1o1024dx CCTK_ATTRIBUTE_UNUSED = 0.0009765625*INV(dx);
  const CCTK_REAL p1o1024dy CCTK_ATTRIBUTE_UNUSED = 0.0009765625*INV(dy);
  const CCTK_REAL p1o1024dz CCTK_ATTRIBUTE_UNUSED = 0.0009765625*INV(dz);
  const CCTK_REAL p1o1680dx CCTK_ATTRIBUTE_UNUSED = 0.000595238095238095238095238095238*INV(dx);
  const CCTK_REAL p1o1680dy CCTK_ATTRIBUTE_UNUSED = 0.000595238095238095238095238095238*INV(dy);
  const CCTK_REAL p1o1680dz CCTK_ATTRIBUTE_UNUSED = 0.000595238095238095238095238095238*INV(dz);
  const CCTK_REAL p1o2dx CCTK_ATTRIBUTE_UNUSED = 0.5*INV(dx);
  const CCTK_REAL p1o2dy CCTK_ATTRIBUTE_UNUSED = 0.5*INV(dy);
  const CCTK_REAL p1o2dz CCTK_ATTRIBUTE_UNUSED = 0.5*INV(dz);
  const CCTK_REAL p1o5040dx2 CCTK_ATTRIBUTE_UNUSED = 0.000198412698412698412698412698413*INV(SQR(dx));
  const CCTK_REAL p1o5040dy2 CCTK_ATTRIBUTE_UNUSED = 0.000198412698412698412698412698413*INV(SQR(dy));
  const CCTK_REAL p1o5040dz2 CCTK_ATTRIBUTE_UNUSED = 0.000198412698412698412698412698413*INV(SQR(dz));
  const CCTK_REAL p1o560dx CCTK_ATTRIBUTE_UNUSED = 0.00178571428571428571428571428571*INV(dx);
  const CCTK_REAL p1o560dy CCTK_ATTRIBUTE_UNUSED = 0.00178571428571428571428571428571*INV(dy);
  const CCTK_REAL p1o560dz CCTK_ATTRIBUTE_UNUSED = 0.00178571428571428571428571428571*INV(dz);
  const CCTK_REAL p1o705600dxdy CCTK_ATTRIBUTE_UNUSED = 1.41723356009070294784580498866e-6*INV(dx*dy);
  const CCTK_REAL p1o705600dxdz CCTK_ATTRIBUTE_UNUSED = 1.41723356009070294784580498866e-6*INV(dx*dz);
  const CCTK_REAL p1o705600dydz CCTK_ATTRIBUTE_UNUSED = 1.41723356009070294784580498866e-6*INV(dy*dz);
  const CCTK_REAL p1o840dx CCTK_ATTRIBUTE_UNUSED = 0.00119047619047619047619047619048*INV(dx);
  const CCTK_REAL p1o840dy CCTK_ATTRIBUTE_UNUSED = 0.00119047619047619047619047619048*INV(dy);
  const CCTK_REAL p1o840dz CCTK_ATTRIBUTE_UNUSED = 0.00119047619047619047619047619048*INV(dz);
  const CCTK_REAL p1odx CCTK_ATTRIBUTE_UNUSED = INV(dx);
  const CCTK_REAL p1ody CCTK_ATTRIBUTE_UNUSED = INV(dy);
  const CCTK_REAL p1odz CCTK_ATTRIBUTE_UNUSED = INV(dz);
  const CCTK_REAL pm1o2dx CCTK_ATTRIBUTE_UNUSED = -0.5*INV(dx);
  const CCTK_REAL pm1o2dy CCTK_ATTRIBUTE_UNUSED = -0.5*INV(dy);
  const CCTK_REAL pm1o2dz CCTK_ATTRIBUTE_UNUSED = -0.5*INV(dz);
  const CCTK_REAL pm1o840dx CCTK_ATTRIBUTE_UNUSED = -0.00119047619047619047619047619048*INV(dx);
  const CCTK_REAL pm1o840dy CCTK_ATTRIBUTE_UNUSED = -0.00119047619047619047619047619048*INV(dy);
  const CCTK_REAL pm1o840dz CCTK_ATTRIBUTE_UNUSED = -0.00119047619047619047619047619048*INV(dz);
  
  /* Assign local copies of arrays functions */
  
  
  
  /* Calculate temporaries and arrays functions */
  
  /* Copy local copies back to grid functions */
  CAKERNEL_DEVICE_ML_BSSN_copy_to_device_Computations_Begin
    
    /* Assign local copies of grid functions */
    
    CCTK_REAL AL CCTK_ATTRIBUTE_UNUSED = I3D(A,0,0,0);
    CCTK_REAL alphaL CCTK_ATTRIBUTE_UNUSED = I3D(alpha,0,0,0);
    CCTK_REAL At11L CCTK_ATTRIBUTE_UNUSED = I3D(At11,0,0,0);
    CCTK_REAL At12L CCTK_ATTRIBUTE_UNUSED = I3D(At12,0,0,0);
    CCTK_REAL At13L CCTK_ATTRIBUTE_UNUSED = I3D(At13,0,0,0);
    CCTK_REAL At22L CCTK_ATTRIBUTE_UNUSED = I3D(At22,0,0,0);
    CCTK_REAL At23L CCTK_ATTRIBUTE_UNUSED = I3D(At23,0,0,0);
    CCTK_REAL At33L CCTK_ATTRIBUTE_UNUSED = I3D(At33,0,0,0);
    CCTK_REAL B1L CCTK_ATTRIBUTE_UNUSED = I3D(B1,0,0,0);
    CCTK_REAL B2L CCTK_ATTRIBUTE_UNUSED = I3D(B2,0,0,0);
    CCTK_REAL B3L CCTK_ATTRIBUTE_UNUSED = I3D(B3,0,0,0);
    CCTK_REAL beta1L CCTK_ATTRIBUTE_UNUSED = I3D(beta1,0,0,0);
    CCTK_REAL beta2L CCTK_ATTRIBUTE_UNUSED = I3D(beta2,0,0,0);
    CCTK_REAL beta3L CCTK_ATTRIBUTE_UNUSED = I3D(beta3,0,0,0);
    CCTK_REAL gt11L CCTK_ATTRIBUTE_UNUSED = I3D(gt11,0,0,0);
    CCTK_REAL gt12L CCTK_ATTRIBUTE_UNUSED = I3D(gt12,0,0,0);
    CCTK_REAL gt13L CCTK_ATTRIBUTE_UNUSED = I3D(gt13,0,0,0);
    CCTK_REAL gt22L CCTK_ATTRIBUTE_UNUSED = I3D(gt22,0,0,0);
    CCTK_REAL gt23L CCTK_ATTRIBUTE_UNUSED = I3D(gt23,0,0,0);
    CCTK_REAL gt33L CCTK_ATTRIBUTE_UNUSED = I3D(gt33,0,0,0);
    CCTK_REAL phiL CCTK_ATTRIBUTE_UNUSED = I3D(phi,0,0,0);
    CCTK_REAL trKL CCTK_ATTRIBUTE_UNUSED = I3D(trK,0,0,0);
    CCTK_REAL Xt1L CCTK_ATTRIBUTE_UNUSED = I3D(Xt1,0,0,0);
    CCTK_REAL Xt2L CCTK_ATTRIBUTE_UNUSED = I3D(Xt2,0,0,0);
    CCTK_REAL Xt3L CCTK_ATTRIBUTE_UNUSED = I3D(Xt3,0,0,0);
    
    
    /* Include user supplied include files */
    
    /* Precompute derivatives */
    
    /* Calculate temporaries and grid functions */
    phiL = phiL;
    
    gt11L = gt11L;
    
    gt12L = gt12L;
    
    gt13L = gt13L;
    
    gt22L = gt22L;
    
    gt23L = gt23L;
    
    gt33L = gt33L;
    
    Xt1L = Xt1L;
    
    Xt2L = Xt2L;
    
    Xt3L = Xt3L;
    
    trKL = trKL;
    
    At11L = At11L;
    
    At12L = At12L;
    
    At13L = At13L;
    
    At22L = At22L;
    
    At23L = At23L;
    
    At33L = At33L;
    
    alphaL = alphaL;
    
    AL = AL;
    
    beta1L = beta1L;
    
    beta2L = beta2L;
    
    beta3L = beta3L;
    
    B1L = B1L;
    
    B2L = B2L;
    
    B3L = B3L;
    
    /* Copy local copies back to grid functions */
    I3D(A,0,0,0) = AL;
    I3D(alpha,0,0,0) = alphaL;
    I3D(At11,0,0,0) = At11L;
    I3D(At12,0,0,0) = At12L;
    I3D(At13,0,0,0) = At13L;
    I3D(At22,0,0,0) = At22L;
    I3D(At23,0,0,0) = At23L;
    I3D(At33,0,0,0) = At33L;
    I3D(B1,0,0,0) = B1L;
    I3D(B2,0,0,0) = B2L;
    I3D(B3,0,0,0) = B3L;
    I3D(beta1,0,0,0) = beta1L;
    I3D(beta2,0,0,0) = beta2L;
    I3D(beta3,0,0,0) = beta3L;
    I3D(gt11,0,0,0) = gt11L;
    I3D(gt12,0,0,0) = gt12L;
    I3D(gt13,0,0,0) = gt13L;
    I3D(gt22,0,0,0) = gt22L;
    I3D(gt23,0,0,0) = gt23L;
    I3D(gt33,0,0,0) = gt33L;
    I3D(phi,0,0,0) = phiL;
    I3D(trK,0,0,0) = trKL;
    I3D(Xt1,0,0,0) = Xt1L;
    I3D(Xt2,0,0,0) = Xt2L;
    I3D(Xt3,0,0,0) = Xt3L;
    
  CAKERNEL_DEVICE_ML_BSSN_copy_to_device_Computations_End
  
CAKERNEL_DEVICE_ML_BSSN_copy_to_device_End
