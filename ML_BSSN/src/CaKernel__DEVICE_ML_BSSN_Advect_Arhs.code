#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define INV(x) ((CCTK_REAL)1.0 / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * SQR(x))
#define QAD(x) (SQR(SQR(x)))

CAKERNEL_DEVICE_ML_BSSN_Advect_Arhs_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  const CCTK_REAL dx CCTK_ATTRIBUTE_UNUSED = params.cagh_dx;
  const CCTK_REAL dy CCTK_ATTRIBUTE_UNUSED = params.cagh_dy;
  const CCTK_REAL dz CCTK_ATTRIBUTE_UNUSED = params.cagh_dz;
  const CCTK_REAL dt CCTK_ATTRIBUTE_UNUSED = params.cagh_dt;
  const CCTK_REAL t CCTK_ATTRIBUTE_UNUSED = params.cagh_time;
  const CCTK_REAL dxi CCTK_ATTRIBUTE_UNUSED = INV(dx);
  const CCTK_REAL dyi CCTK_ATTRIBUTE_UNUSED = INV(dy);
  const CCTK_REAL dzi CCTK_ATTRIBUTE_UNUSED = INV(dz);
  const CCTK_REAL khalf CCTK_ATTRIBUTE_UNUSED = 0.5;
  const CCTK_REAL kthird CCTK_ATTRIBUTE_UNUSED = 1/3.0;
  const CCTK_REAL ktwothird CCTK_ATTRIBUTE_UNUSED = 2.0/3.0;
  const CCTK_REAL kfourthird CCTK_ATTRIBUTE_UNUSED = 4.0/3.0;
  const CCTK_REAL keightthird CCTK_ATTRIBUTE_UNUSED = 8.0/3.0;
  const CCTK_REAL hdxi CCTK_ATTRIBUTE_UNUSED = 0.5 * dxi;
  const CCTK_REAL hdyi CCTK_ATTRIBUTE_UNUSED = 0.5 * dyi;
  const CCTK_REAL hdzi CCTK_ATTRIBUTE_UNUSED = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  const CCTK_REAL p1o1024dx CCTK_ATTRIBUTE_UNUSED = 0.0009765625*INV(dx);
  const CCTK_REAL p1o1024dy CCTK_ATTRIBUTE_UNUSED = 0.0009765625*INV(dy);
  const CCTK_REAL p1o1024dz CCTK_ATTRIBUTE_UNUSED = 0.0009765625*INV(dz);
  const CCTK_REAL p1o1680dx CCTK_ATTRIBUTE_UNUSED = 0.000595238095238095238095238095238*INV(dx);
  const CCTK_REAL p1o1680dy CCTK_ATTRIBUTE_UNUSED = 0.000595238095238095238095238095238*INV(dy);
  const CCTK_REAL p1o1680dz CCTK_ATTRIBUTE_UNUSED = 0.000595238095238095238095238095238*INV(dz);
  const CCTK_REAL p1o2dx CCTK_ATTRIBUTE_UNUSED = 0.5*INV(dx);
  const CCTK_REAL p1o2dy CCTK_ATTRIBUTE_UNUSED = 0.5*INV(dy);
  const CCTK_REAL p1o2dz CCTK_ATTRIBUTE_UNUSED = 0.5*INV(dz);
  const CCTK_REAL p1o5040dx2 CCTK_ATTRIBUTE_UNUSED = 0.000198412698412698412698412698413*INV(SQR(dx));
  const CCTK_REAL p1o5040dy2 CCTK_ATTRIBUTE_UNUSED = 0.000198412698412698412698412698413*INV(SQR(dy));
  const CCTK_REAL p1o5040dz2 CCTK_ATTRIBUTE_UNUSED = 0.000198412698412698412698412698413*INV(SQR(dz));
  const CCTK_REAL p1o560dx CCTK_ATTRIBUTE_UNUSED = 0.00178571428571428571428571428571*INV(dx);
  const CCTK_REAL p1o560dy CCTK_ATTRIBUTE_UNUSED = 0.00178571428571428571428571428571*INV(dy);
  const CCTK_REAL p1o560dz CCTK_ATTRIBUTE_UNUSED = 0.00178571428571428571428571428571*INV(dz);
  const CCTK_REAL p1o705600dxdy CCTK_ATTRIBUTE_UNUSED = 1.41723356009070294784580498866e-6*INV(dx*dy);
  const CCTK_REAL p1o705600dxdz CCTK_ATTRIBUTE_UNUSED = 1.41723356009070294784580498866e-6*INV(dx*dz);
  const CCTK_REAL p1o705600dydz CCTK_ATTRIBUTE_UNUSED = 1.41723356009070294784580498866e-6*INV(dy*dz);
  const CCTK_REAL p1o840dx CCTK_ATTRIBUTE_UNUSED = 0.00119047619047619047619047619048*INV(dx);
  const CCTK_REAL p1o840dy CCTK_ATTRIBUTE_UNUSED = 0.00119047619047619047619047619048*INV(dy);
  const CCTK_REAL p1o840dz CCTK_ATTRIBUTE_UNUSED = 0.00119047619047619047619047619048*INV(dz);
  const CCTK_REAL p1odx CCTK_ATTRIBUTE_UNUSED = INV(dx);
  const CCTK_REAL p1ody CCTK_ATTRIBUTE_UNUSED = INV(dy);
  const CCTK_REAL p1odz CCTK_ATTRIBUTE_UNUSED = INV(dz);
  const CCTK_REAL pm1o2dx CCTK_ATTRIBUTE_UNUSED = -0.5*INV(dx);
  const CCTK_REAL pm1o2dy CCTK_ATTRIBUTE_UNUSED = -0.5*INV(dy);
  const CCTK_REAL pm1o2dz CCTK_ATTRIBUTE_UNUSED = -0.5*INV(dz);
  const CCTK_REAL pm1o840dx CCTK_ATTRIBUTE_UNUSED = -0.00119047619047619047619047619048*INV(dx);
  const CCTK_REAL pm1o840dy CCTK_ATTRIBUTE_UNUSED = -0.00119047619047619047619047619048*INV(dy);
  const CCTK_REAL pm1o840dz CCTK_ATTRIBUTE_UNUSED = -0.00119047619047619047619047619048*INV(dz);
  
  /* Assign local copies of arrays functions */
  
  
  
  /* Calculate temporaries and arrays functions */
  
  /* Copy local copies back to grid functions */
  CAKERNEL_DEVICE_ML_BSSN_Advect_Arhs_Computations_Begin
    
    /* Assign local copies of grid functions */
    
    CCTK_REAL AL CCTK_ATTRIBUTE_UNUSED = I3D(A,0,0,0);
    CCTK_REAL ArhsL CCTK_ATTRIBUTE_UNUSED = I3D(Arhs,0,0,0);
    CCTK_REAL beta1L CCTK_ATTRIBUTE_UNUSED = I3D(beta1,0,0,0);
    CCTK_REAL beta2L CCTK_ATTRIBUTE_UNUSED = I3D(beta2,0,0,0);
    CCTK_REAL beta3L CCTK_ATTRIBUTE_UNUSED = I3D(beta3,0,0,0);
    CCTK_REAL trKL CCTK_ATTRIBUTE_UNUSED = I3D(trK,0,0,0);
    
    
    /* Include user supplied include files */
    
    /* Precompute derivatives */
    const CCTK_REAL PDupwindNthAnti1A CCTK_ATTRIBUTE_UNUSED = PDupwindNthAnti1(A);
    const CCTK_REAL PDupwindNthSymm1A CCTK_ATTRIBUTE_UNUSED = PDupwindNthSymm1(A);
    const CCTK_REAL PDupwindNthAnti2A CCTK_ATTRIBUTE_UNUSED = PDupwindNthAnti2(A);
    const CCTK_REAL PDupwindNthSymm2A CCTK_ATTRIBUTE_UNUSED = PDupwindNthSymm2(A);
    const CCTK_REAL PDupwindNthAnti3A CCTK_ATTRIBUTE_UNUSED = PDupwindNthAnti3(A);
    const CCTK_REAL PDupwindNthSymm3A CCTK_ATTRIBUTE_UNUSED = PDupwindNthSymm3(A);
    const CCTK_REAL PDupwindNthAnti1trK CCTK_ATTRIBUTE_UNUSED = PDupwindNthAnti1(trK);
    const CCTK_REAL PDupwindNthSymm1trK CCTK_ATTRIBUTE_UNUSED = PDupwindNthSymm1(trK);
    const CCTK_REAL PDupwindNthAnti2trK CCTK_ATTRIBUTE_UNUSED = PDupwindNthAnti2(trK);
    const CCTK_REAL PDupwindNthSymm2trK CCTK_ATTRIBUTE_UNUSED = PDupwindNthSymm2(trK);
    const CCTK_REAL PDupwindNthAnti3trK CCTK_ATTRIBUTE_UNUSED = PDupwindNthAnti3(trK);
    const CCTK_REAL PDupwindNthSymm3trK CCTK_ATTRIBUTE_UNUSED = PDupwindNthSymm3(trK);
    
    /* Calculate temporaries and grid functions */
    ptrdiff_t dir1 CCTK_ATTRIBUTE_UNUSED = isgn(beta1L);
    
    ptrdiff_t dir2 CCTK_ATTRIBUTE_UNUSED = isgn(beta2L);
    
    ptrdiff_t dir3 CCTK_ATTRIBUTE_UNUSED = isgn(beta3L);
    
    ArhsL = ArhsL + ToReal(LapseACoeff)*(-((beta1L*PDupwindNthAnti1trK + 
      beta2L*PDupwindNthAnti2trK + beta3L*PDupwindNthAnti3trK + 
      PDupwindNthSymm1trK*fabs(beta1L) + PDupwindNthSymm2trK*fabs(beta2L) + 
      PDupwindNthSymm3trK*fabs(beta3L))*(-1 + ToReal(LapseAdvectionCoeff))) + 
      (beta1L*PDupwindNthAnti1A + beta2L*PDupwindNthAnti2A + 
      beta3L*PDupwindNthAnti3A + PDupwindNthSymm1A*fabs(beta1L) + 
      PDupwindNthSymm2A*fabs(beta2L) + 
      PDupwindNthSymm3A*fabs(beta3L))*ToReal(LapseAdvectionCoeff));
    
    /* Copy local copies back to grid functions */
    I3D(Arhs,0,0,0) = ArhsL;
    
  CAKERNEL_DEVICE_ML_BSSN_Advect_Arhs_Computations_End
  
CAKERNEL_DEVICE_ML_BSSN_Advect_Arhs_End
