#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define QAD(x) (SQR(SQR(x)))
#define INV(x) ((1.0) / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * (x) * (x))

CAKERNEL_ML_BSSN_Advect_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  CCTK_REAL const dx = params.cagh_dx;
  CCTK_REAL const dy = params.cagh_dy;
  CCTK_REAL const dz = params.cagh_dz;
  CCTK_REAL const dt = params.cagh_dt;
  CCTK_REAL const t = params.cagh_time;
  CCTK_REAL const dxi = INV(dx);
  CCTK_REAL const dyi = INV(dy);
  CCTK_REAL const dzi = INV(dz);
  CCTK_REAL const khalf = 0.5;
  CCTK_REAL const kthird = 1/3.0;
  CCTK_REAL const ktwothird = 2.0/3.0;
  CCTK_REAL const kfourthird = 4.0/3.0;
  CCTK_REAL const keightthird = 8.0/3.0;
  CCTK_REAL const hdxi = 0.5 * dxi;
  CCTK_REAL const hdyi = 0.5 * dyi;
  CCTK_REAL const hdzi = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  CCTK_REAL const p1o12dx = 0.0833333333333333333333333333333*INV(dx);
  CCTK_REAL const p1o12dy = 0.0833333333333333333333333333333*INV(dy);
  CCTK_REAL const p1o12dz = 0.0833333333333333333333333333333*INV(dz);
  CCTK_REAL const p1o144dxdy = 0.00694444444444444444444444444444*INV(dx)*INV(dy);
  CCTK_REAL const p1o144dxdz = 0.00694444444444444444444444444444*INV(dx)*INV(dz);
  CCTK_REAL const p1o144dydz = 0.00694444444444444444444444444444*INV(dy)*INV(dz);
  CCTK_REAL const p1o24dx = 0.0416666666666666666666666666667*INV(dx);
  CCTK_REAL const p1o24dy = 0.0416666666666666666666666666667*INV(dy);
  CCTK_REAL const p1o24dz = 0.0416666666666666666666666666667*INV(dz);
  CCTK_REAL const p1o64dx = 0.015625*INV(dx);
  CCTK_REAL const p1o64dy = 0.015625*INV(dy);
  CCTK_REAL const p1o64dz = 0.015625*INV(dz);
  CCTK_REAL const p1odx = INV(dx);
  CCTK_REAL const p1ody = INV(dy);
  CCTK_REAL const p1odz = INV(dz);
  CCTK_REAL const pm1o12dx2 = -0.0833333333333333333333333333333*INV(SQR(dx));
  CCTK_REAL const pm1o12dy2 = -0.0833333333333333333333333333333*INV(SQR(dy));
  CCTK_REAL const pm1o12dz2 = -0.0833333333333333333333333333333*INV(SQR(dz));
  
  /* Assign local copies of arrays functions */
  
  
  
  /* Calculate temporaries and arrays functions */
  
  /* Copy local copies back to grid functions */
  CAKERNEL_ML_BSSN_Advect_Computations_Begin
    
    /* Assign local copies of grid functions */
    
    CCTK_REAL AL = I3D(A,0,0,0);
    CCTK_REAL alphaL = I3D(alpha,0,0,0);
    CCTK_REAL alpharhsL = I3D(alpharhs,0,0,0);
    CCTK_REAL ArhsL = I3D(Arhs,0,0,0);
    CCTK_REAL At11L = I3D(At11,0,0,0);
    CCTK_REAL At11rhsL = I3D(At11rhs,0,0,0);
    CCTK_REAL At12L = I3D(At12,0,0,0);
    CCTK_REAL At12rhsL = I3D(At12rhs,0,0,0);
    CCTK_REAL At13L = I3D(At13,0,0,0);
    CCTK_REAL At13rhsL = I3D(At13rhs,0,0,0);
    CCTK_REAL At22L = I3D(At22,0,0,0);
    CCTK_REAL At22rhsL = I3D(At22rhs,0,0,0);
    CCTK_REAL At23L = I3D(At23,0,0,0);
    CCTK_REAL At23rhsL = I3D(At23rhs,0,0,0);
    CCTK_REAL At33L = I3D(At33,0,0,0);
    CCTK_REAL At33rhsL = I3D(At33rhs,0,0,0);
    CCTK_REAL B1L = I3D(B1,0,0,0);
    CCTK_REAL B1rhsL = I3D(B1rhs,0,0,0);
    CCTK_REAL B2L = I3D(B2,0,0,0);
    CCTK_REAL B2rhsL = I3D(B2rhs,0,0,0);
    CCTK_REAL B3L = I3D(B3,0,0,0);
    CCTK_REAL B3rhsL = I3D(B3rhs,0,0,0);
    CCTK_REAL beta1L = I3D(beta1,0,0,0);
    CCTK_REAL beta1rhsL = I3D(beta1rhs,0,0,0);
    CCTK_REAL beta2L = I3D(beta2,0,0,0);
    CCTK_REAL beta2rhsL = I3D(beta2rhs,0,0,0);
    CCTK_REAL beta3L = I3D(beta3,0,0,0);
    CCTK_REAL beta3rhsL = I3D(beta3rhs,0,0,0);
    CCTK_REAL gt11L = I3D(gt11,0,0,0);
    CCTK_REAL gt11rhsL = I3D(gt11rhs,0,0,0);
    CCTK_REAL gt12L = I3D(gt12,0,0,0);
    CCTK_REAL gt12rhsL = I3D(gt12rhs,0,0,0);
    CCTK_REAL gt13L = I3D(gt13,0,0,0);
    CCTK_REAL gt13rhsL = I3D(gt13rhs,0,0,0);
    CCTK_REAL gt22L = I3D(gt22,0,0,0);
    CCTK_REAL gt22rhsL = I3D(gt22rhs,0,0,0);
    CCTK_REAL gt23L = I3D(gt23,0,0,0);
    CCTK_REAL gt23rhsL = I3D(gt23rhs,0,0,0);
    CCTK_REAL gt33L = I3D(gt33,0,0,0);
    CCTK_REAL gt33rhsL = I3D(gt33rhs,0,0,0);
    CCTK_REAL phiL = I3D(phi,0,0,0);
    CCTK_REAL phirhsL = I3D(phirhs,0,0,0);
    CCTK_REAL trKL = I3D(trK,0,0,0);
    CCTK_REAL trKrhsL = I3D(trKrhs,0,0,0);
    CCTK_REAL Xt1L = I3D(Xt1,0,0,0);
    CCTK_REAL Xt1rhsL = I3D(Xt1rhs,0,0,0);
    CCTK_REAL Xt2L = I3D(Xt2,0,0,0);
    CCTK_REAL Xt2rhsL = I3D(Xt2rhs,0,0,0);
    CCTK_REAL Xt3L = I3D(Xt3,0,0,0);
    CCTK_REAL Xt3rhsL = I3D(Xt3rhs,0,0,0);
    
    
    /* Include user supplied include files */
    
    /* Precompute derivatives */
    CCTK_REAL const PDupwindNthAnti1A = PDupwindNthAnti1(A);
    CCTK_REAL const PDupwindNthSymm1A = PDupwindNthSymm1(A);
    CCTK_REAL const PDupwindNthAnti2A = PDupwindNthAnti2(A);
    CCTK_REAL const PDupwindNthSymm2A = PDupwindNthSymm2(A);
    CCTK_REAL const PDupwindNthAnti3A = PDupwindNthAnti3(A);
    CCTK_REAL const PDupwindNthSymm3A = PDupwindNthSymm3(A);
    CCTK_REAL const PDupwindNthAnti1alpha = PDupwindNthAnti1(alpha);
    CCTK_REAL const PDupwindNthSymm1alpha = PDupwindNthSymm1(alpha);
    CCTK_REAL const PDupwindNthAnti2alpha = PDupwindNthAnti2(alpha);
    CCTK_REAL const PDupwindNthSymm2alpha = PDupwindNthSymm2(alpha);
    CCTK_REAL const PDupwindNthAnti3alpha = PDupwindNthAnti3(alpha);
    CCTK_REAL const PDupwindNthSymm3alpha = PDupwindNthSymm3(alpha);
    CCTK_REAL const PDupwindNthAnti1At11 = PDupwindNthAnti1(At11);
    CCTK_REAL const PDupwindNthSymm1At11 = PDupwindNthSymm1(At11);
    CCTK_REAL const PDupwindNthAnti2At11 = PDupwindNthAnti2(At11);
    CCTK_REAL const PDupwindNthSymm2At11 = PDupwindNthSymm2(At11);
    CCTK_REAL const PDupwindNthAnti3At11 = PDupwindNthAnti3(At11);
    CCTK_REAL const PDupwindNthSymm3At11 = PDupwindNthSymm3(At11);
    CCTK_REAL const PDupwindNthAnti1At12 = PDupwindNthAnti1(At12);
    CCTK_REAL const PDupwindNthSymm1At12 = PDupwindNthSymm1(At12);
    CCTK_REAL const PDupwindNthAnti2At12 = PDupwindNthAnti2(At12);
    CCTK_REAL const PDupwindNthSymm2At12 = PDupwindNthSymm2(At12);
    CCTK_REAL const PDupwindNthAnti3At12 = PDupwindNthAnti3(At12);
    CCTK_REAL const PDupwindNthSymm3At12 = PDupwindNthSymm3(At12);
    CCTK_REAL const PDupwindNthAnti1At13 = PDupwindNthAnti1(At13);
    CCTK_REAL const PDupwindNthSymm1At13 = PDupwindNthSymm1(At13);
    CCTK_REAL const PDupwindNthAnti2At13 = PDupwindNthAnti2(At13);
    CCTK_REAL const PDupwindNthSymm2At13 = PDupwindNthSymm2(At13);
    CCTK_REAL const PDupwindNthAnti3At13 = PDupwindNthAnti3(At13);
    CCTK_REAL const PDupwindNthSymm3At13 = PDupwindNthSymm3(At13);
    CCTK_REAL const PDupwindNthAnti1At22 = PDupwindNthAnti1(At22);
    CCTK_REAL const PDupwindNthSymm1At22 = PDupwindNthSymm1(At22);
    CCTK_REAL const PDupwindNthAnti2At22 = PDupwindNthAnti2(At22);
    CCTK_REAL const PDupwindNthSymm2At22 = PDupwindNthSymm2(At22);
    CCTK_REAL const PDupwindNthAnti3At22 = PDupwindNthAnti3(At22);
    CCTK_REAL const PDupwindNthSymm3At22 = PDupwindNthSymm3(At22);
    CCTK_REAL const PDupwindNthAnti1At23 = PDupwindNthAnti1(At23);
    CCTK_REAL const PDupwindNthSymm1At23 = PDupwindNthSymm1(At23);
    CCTK_REAL const PDupwindNthAnti2At23 = PDupwindNthAnti2(At23);
    CCTK_REAL const PDupwindNthSymm2At23 = PDupwindNthSymm2(At23);
    CCTK_REAL const PDupwindNthAnti3At23 = PDupwindNthAnti3(At23);
    CCTK_REAL const PDupwindNthSymm3At23 = PDupwindNthSymm3(At23);
    CCTK_REAL const PDupwindNthAnti1At33 = PDupwindNthAnti1(At33);
    CCTK_REAL const PDupwindNthSymm1At33 = PDupwindNthSymm1(At33);
    CCTK_REAL const PDupwindNthAnti2At33 = PDupwindNthAnti2(At33);
    CCTK_REAL const PDupwindNthSymm2At33 = PDupwindNthSymm2(At33);
    CCTK_REAL const PDupwindNthAnti3At33 = PDupwindNthAnti3(At33);
    CCTK_REAL const PDupwindNthSymm3At33 = PDupwindNthSymm3(At33);
    CCTK_REAL const PDupwindNthAnti1B1 = PDupwindNthAnti1(B1);
    CCTK_REAL const PDupwindNthSymm1B1 = PDupwindNthSymm1(B1);
    CCTK_REAL const PDupwindNthAnti2B1 = PDupwindNthAnti2(B1);
    CCTK_REAL const PDupwindNthSymm2B1 = PDupwindNthSymm2(B1);
    CCTK_REAL const PDupwindNthAnti3B1 = PDupwindNthAnti3(B1);
    CCTK_REAL const PDupwindNthSymm3B1 = PDupwindNthSymm3(B1);
    CCTK_REAL const PDupwindNthAnti1B2 = PDupwindNthAnti1(B2);
    CCTK_REAL const PDupwindNthSymm1B2 = PDupwindNthSymm1(B2);
    CCTK_REAL const PDupwindNthAnti2B2 = PDupwindNthAnti2(B2);
    CCTK_REAL const PDupwindNthSymm2B2 = PDupwindNthSymm2(B2);
    CCTK_REAL const PDupwindNthAnti3B2 = PDupwindNthAnti3(B2);
    CCTK_REAL const PDupwindNthSymm3B2 = PDupwindNthSymm3(B2);
    CCTK_REAL const PDupwindNthAnti1B3 = PDupwindNthAnti1(B3);
    CCTK_REAL const PDupwindNthSymm1B3 = PDupwindNthSymm1(B3);
    CCTK_REAL const PDupwindNthAnti2B3 = PDupwindNthAnti2(B3);
    CCTK_REAL const PDupwindNthSymm2B3 = PDupwindNthSymm2(B3);
    CCTK_REAL const PDupwindNthAnti3B3 = PDupwindNthAnti3(B3);
    CCTK_REAL const PDupwindNthSymm3B3 = PDupwindNthSymm3(B3);
    CCTK_REAL const PDupwindNthAnti1beta1 = PDupwindNthAnti1(beta1);
    CCTK_REAL const PDupwindNthSymm1beta1 = PDupwindNthSymm1(beta1);
    CCTK_REAL const PDupwindNthAnti2beta1 = PDupwindNthAnti2(beta1);
    CCTK_REAL const PDupwindNthSymm2beta1 = PDupwindNthSymm2(beta1);
    CCTK_REAL const PDupwindNthAnti3beta1 = PDupwindNthAnti3(beta1);
    CCTK_REAL const PDupwindNthSymm3beta1 = PDupwindNthSymm3(beta1);
    CCTK_REAL const PDupwindNthAnti1beta2 = PDupwindNthAnti1(beta2);
    CCTK_REAL const PDupwindNthSymm1beta2 = PDupwindNthSymm1(beta2);
    CCTK_REAL const PDupwindNthAnti2beta2 = PDupwindNthAnti2(beta2);
    CCTK_REAL const PDupwindNthSymm2beta2 = PDupwindNthSymm2(beta2);
    CCTK_REAL const PDupwindNthAnti3beta2 = PDupwindNthAnti3(beta2);
    CCTK_REAL const PDupwindNthSymm3beta2 = PDupwindNthSymm3(beta2);
    CCTK_REAL const PDupwindNthAnti1beta3 = PDupwindNthAnti1(beta3);
    CCTK_REAL const PDupwindNthSymm1beta3 = PDupwindNthSymm1(beta3);
    CCTK_REAL const PDupwindNthAnti2beta3 = PDupwindNthAnti2(beta3);
    CCTK_REAL const PDupwindNthSymm2beta3 = PDupwindNthSymm2(beta3);
    CCTK_REAL const PDupwindNthAnti3beta3 = PDupwindNthAnti3(beta3);
    CCTK_REAL const PDupwindNthSymm3beta3 = PDupwindNthSymm3(beta3);
    CCTK_REAL const PDupwindNthAnti1gt11 = PDupwindNthAnti1(gt11);
    CCTK_REAL const PDupwindNthSymm1gt11 = PDupwindNthSymm1(gt11);
    CCTK_REAL const PDupwindNthAnti2gt11 = PDupwindNthAnti2(gt11);
    CCTK_REAL const PDupwindNthSymm2gt11 = PDupwindNthSymm2(gt11);
    CCTK_REAL const PDupwindNthAnti3gt11 = PDupwindNthAnti3(gt11);
    CCTK_REAL const PDupwindNthSymm3gt11 = PDupwindNthSymm3(gt11);
    CCTK_REAL const PDupwindNthAnti1gt12 = PDupwindNthAnti1(gt12);
    CCTK_REAL const PDupwindNthSymm1gt12 = PDupwindNthSymm1(gt12);
    CCTK_REAL const PDupwindNthAnti2gt12 = PDupwindNthAnti2(gt12);
    CCTK_REAL const PDupwindNthSymm2gt12 = PDupwindNthSymm2(gt12);
    CCTK_REAL const PDupwindNthAnti3gt12 = PDupwindNthAnti3(gt12);
    CCTK_REAL const PDupwindNthSymm3gt12 = PDupwindNthSymm3(gt12);
    CCTK_REAL const PDupwindNthAnti1gt13 = PDupwindNthAnti1(gt13);
    CCTK_REAL const PDupwindNthSymm1gt13 = PDupwindNthSymm1(gt13);
    CCTK_REAL const PDupwindNthAnti2gt13 = PDupwindNthAnti2(gt13);
    CCTK_REAL const PDupwindNthSymm2gt13 = PDupwindNthSymm2(gt13);
    CCTK_REAL const PDupwindNthAnti3gt13 = PDupwindNthAnti3(gt13);
    CCTK_REAL const PDupwindNthSymm3gt13 = PDupwindNthSymm3(gt13);
    CCTK_REAL const PDupwindNthAnti1gt22 = PDupwindNthAnti1(gt22);
    CCTK_REAL const PDupwindNthSymm1gt22 = PDupwindNthSymm1(gt22);
    CCTK_REAL const PDupwindNthAnti2gt22 = PDupwindNthAnti2(gt22);
    CCTK_REAL const PDupwindNthSymm2gt22 = PDupwindNthSymm2(gt22);
    CCTK_REAL const PDupwindNthAnti3gt22 = PDupwindNthAnti3(gt22);
    CCTK_REAL const PDupwindNthSymm3gt22 = PDupwindNthSymm3(gt22);
    CCTK_REAL const PDupwindNthAnti1gt23 = PDupwindNthAnti1(gt23);
    CCTK_REAL const PDupwindNthSymm1gt23 = PDupwindNthSymm1(gt23);
    CCTK_REAL const PDupwindNthAnti2gt23 = PDupwindNthAnti2(gt23);
    CCTK_REAL const PDupwindNthSymm2gt23 = PDupwindNthSymm2(gt23);
    CCTK_REAL const PDupwindNthAnti3gt23 = PDupwindNthAnti3(gt23);
    CCTK_REAL const PDupwindNthSymm3gt23 = PDupwindNthSymm3(gt23);
    CCTK_REAL const PDupwindNthAnti1gt33 = PDupwindNthAnti1(gt33);
    CCTK_REAL const PDupwindNthSymm1gt33 = PDupwindNthSymm1(gt33);
    CCTK_REAL const PDupwindNthAnti2gt33 = PDupwindNthAnti2(gt33);
    CCTK_REAL const PDupwindNthSymm2gt33 = PDupwindNthSymm2(gt33);
    CCTK_REAL const PDupwindNthAnti3gt33 = PDupwindNthAnti3(gt33);
    CCTK_REAL const PDupwindNthSymm3gt33 = PDupwindNthSymm3(gt33);
    CCTK_REAL const PDupwindNthAnti1phi = PDupwindNthAnti1(phi);
    CCTK_REAL const PDupwindNthSymm1phi = PDupwindNthSymm1(phi);
    CCTK_REAL const PDupwindNthAnti2phi = PDupwindNthAnti2(phi);
    CCTK_REAL const PDupwindNthSymm2phi = PDupwindNthSymm2(phi);
    CCTK_REAL const PDupwindNthAnti3phi = PDupwindNthAnti3(phi);
    CCTK_REAL const PDupwindNthSymm3phi = PDupwindNthSymm3(phi);
    CCTK_REAL const PDupwindNthAnti1trK = PDupwindNthAnti1(trK);
    CCTK_REAL const PDupwindNthSymm1trK = PDupwindNthSymm1(trK);
    CCTK_REAL const PDupwindNthAnti2trK = PDupwindNthAnti2(trK);
    CCTK_REAL const PDupwindNthSymm2trK = PDupwindNthSymm2(trK);
    CCTK_REAL const PDupwindNthAnti3trK = PDupwindNthAnti3(trK);
    CCTK_REAL const PDupwindNthSymm3trK = PDupwindNthSymm3(trK);
    CCTK_REAL const PDupwindNthAnti1Xt1 = PDupwindNthAnti1(Xt1);
    CCTK_REAL const PDupwindNthSymm1Xt1 = PDupwindNthSymm1(Xt1);
    CCTK_REAL const PDupwindNthAnti2Xt1 = PDupwindNthAnti2(Xt1);
    CCTK_REAL const PDupwindNthSymm2Xt1 = PDupwindNthSymm2(Xt1);
    CCTK_REAL const PDupwindNthAnti3Xt1 = PDupwindNthAnti3(Xt1);
    CCTK_REAL const PDupwindNthSymm3Xt1 = PDupwindNthSymm3(Xt1);
    CCTK_REAL const PDupwindNthAnti1Xt2 = PDupwindNthAnti1(Xt2);
    CCTK_REAL const PDupwindNthSymm1Xt2 = PDupwindNthSymm1(Xt2);
    CCTK_REAL const PDupwindNthAnti2Xt2 = PDupwindNthAnti2(Xt2);
    CCTK_REAL const PDupwindNthSymm2Xt2 = PDupwindNthSymm2(Xt2);
    CCTK_REAL const PDupwindNthAnti3Xt2 = PDupwindNthAnti3(Xt2);
    CCTK_REAL const PDupwindNthSymm3Xt2 = PDupwindNthSymm3(Xt2);
    CCTK_REAL const PDupwindNthAnti1Xt3 = PDupwindNthAnti1(Xt3);
    CCTK_REAL const PDupwindNthSymm1Xt3 = PDupwindNthSymm1(Xt3);
    CCTK_REAL const PDupwindNthAnti2Xt3 = PDupwindNthAnti2(Xt3);
    CCTK_REAL const PDupwindNthSymm2Xt3 = PDupwindNthSymm2(Xt3);
    CCTK_REAL const PDupwindNthAnti3Xt3 = PDupwindNthAnti3(Xt3);
    CCTK_REAL const PDupwindNthSymm3Xt3 = PDupwindNthSymm3(Xt3);
    
    /* Calculate temporaries and grid functions */
    ptrdiff_t dir1 = Sign(beta1L);
    
    ptrdiff_t dir2 = Sign(beta2L);
    
    ptrdiff_t dir3 = Sign(beta3L);
    
    phirhsL = phirhsL + beta1L*PDupwindNthAnti1phi + 
      beta2L*PDupwindNthAnti2phi + beta3L*PDupwindNthAnti3phi + 
      PDupwindNthSymm1phi*Abs(beta1L) + PDupwindNthSymm2phi*Abs(beta2L) + 
      PDupwindNthSymm3phi*Abs(beta3L);
    
    gt11rhsL = gt11rhsL + beta1L*PDupwindNthAnti1gt11 + 
      beta2L*PDupwindNthAnti2gt11 + beta3L*PDupwindNthAnti3gt11 + 
      PDupwindNthSymm1gt11*Abs(beta1L) + PDupwindNthSymm2gt11*Abs(beta2L) 
      + PDupwindNthSymm3gt11*Abs(beta3L);
    
    gt12rhsL = gt12rhsL + beta1L*PDupwindNthAnti1gt12 + 
      beta2L*PDupwindNthAnti2gt12 + beta3L*PDupwindNthAnti3gt12 + 
      PDupwindNthSymm1gt12*Abs(beta1L) + PDupwindNthSymm2gt12*Abs(beta2L) 
      + PDupwindNthSymm3gt12*Abs(beta3L);
    
    gt13rhsL = gt13rhsL + beta1L*PDupwindNthAnti1gt13 + 
      beta2L*PDupwindNthAnti2gt13 + beta3L*PDupwindNthAnti3gt13 + 
      PDupwindNthSymm1gt13*Abs(beta1L) + PDupwindNthSymm2gt13*Abs(beta2L) 
      + PDupwindNthSymm3gt13*Abs(beta3L);
    
    gt22rhsL = gt22rhsL + beta1L*PDupwindNthAnti1gt22 + 
      beta2L*PDupwindNthAnti2gt22 + beta3L*PDupwindNthAnti3gt22 + 
      PDupwindNthSymm1gt22*Abs(beta1L) + PDupwindNthSymm2gt22*Abs(beta2L) 
      + PDupwindNthSymm3gt22*Abs(beta3L);
    
    gt23rhsL = gt23rhsL + beta1L*PDupwindNthAnti1gt23 + 
      beta2L*PDupwindNthAnti2gt23 + beta3L*PDupwindNthAnti3gt23 + 
      PDupwindNthSymm1gt23*Abs(beta1L) + PDupwindNthSymm2gt23*Abs(beta2L) 
      + PDupwindNthSymm3gt23*Abs(beta3L);
    
    gt33rhsL = gt33rhsL + beta1L*PDupwindNthAnti1gt33 + 
      beta2L*PDupwindNthAnti2gt33 + beta3L*PDupwindNthAnti3gt33 + 
      PDupwindNthSymm1gt33*Abs(beta1L) + PDupwindNthSymm2gt33*Abs(beta2L) 
      + PDupwindNthSymm3gt33*Abs(beta3L);
    
    Xt1rhsL = Xt1rhsL + beta1L*PDupwindNthAnti1Xt1 + 
      beta2L*PDupwindNthAnti2Xt1 + beta3L*PDupwindNthAnti3Xt1 + 
      PDupwindNthSymm1Xt1*Abs(beta1L) + PDupwindNthSymm2Xt1*Abs(beta2L) + 
      PDupwindNthSymm3Xt1*Abs(beta3L);
    
    Xt2rhsL = Xt2rhsL + beta1L*PDupwindNthAnti1Xt2 + 
      beta2L*PDupwindNthAnti2Xt2 + beta3L*PDupwindNthAnti3Xt2 + 
      PDupwindNthSymm1Xt2*Abs(beta1L) + PDupwindNthSymm2Xt2*Abs(beta2L) + 
      PDupwindNthSymm3Xt2*Abs(beta3L);
    
    Xt3rhsL = Xt3rhsL + beta1L*PDupwindNthAnti1Xt3 + 
      beta2L*PDupwindNthAnti2Xt3 + beta3L*PDupwindNthAnti3Xt3 + 
      PDupwindNthSymm1Xt3*Abs(beta1L) + PDupwindNthSymm2Xt3*Abs(beta2L) + 
      PDupwindNthSymm3Xt3*Abs(beta3L);
    
    trKrhsL = trKrhsL + beta1L*PDupwindNthAnti1trK + 
      beta2L*PDupwindNthAnti2trK + beta3L*PDupwindNthAnti3trK + 
      PDupwindNthSymm1trK*Abs(beta1L) + PDupwindNthSymm2trK*Abs(beta2L) + 
      PDupwindNthSymm3trK*Abs(beta3L);
    
    At11rhsL = At11rhsL + beta1L*PDupwindNthAnti1At11 + 
      beta2L*PDupwindNthAnti2At11 + beta3L*PDupwindNthAnti3At11 + 
      PDupwindNthSymm1At11*Abs(beta1L) + PDupwindNthSymm2At11*Abs(beta2L) 
      + PDupwindNthSymm3At11*Abs(beta3L);
    
    At12rhsL = At12rhsL + beta1L*PDupwindNthAnti1At12 + 
      beta2L*PDupwindNthAnti2At12 + beta3L*PDupwindNthAnti3At12 + 
      PDupwindNthSymm1At12*Abs(beta1L) + PDupwindNthSymm2At12*Abs(beta2L) 
      + PDupwindNthSymm3At12*Abs(beta3L);
    
    At13rhsL = At13rhsL + beta1L*PDupwindNthAnti1At13 + 
      beta2L*PDupwindNthAnti2At13 + beta3L*PDupwindNthAnti3At13 + 
      PDupwindNthSymm1At13*Abs(beta1L) + PDupwindNthSymm2At13*Abs(beta2L) 
      + PDupwindNthSymm3At13*Abs(beta3L);
    
    At22rhsL = At22rhsL + beta1L*PDupwindNthAnti1At22 + 
      beta2L*PDupwindNthAnti2At22 + beta3L*PDupwindNthAnti3At22 + 
      PDupwindNthSymm1At22*Abs(beta1L) + PDupwindNthSymm2At22*Abs(beta2L) 
      + PDupwindNthSymm3At22*Abs(beta3L);
    
    At23rhsL = At23rhsL + beta1L*PDupwindNthAnti1At23 + 
      beta2L*PDupwindNthAnti2At23 + beta3L*PDupwindNthAnti3At23 + 
      PDupwindNthSymm1At23*Abs(beta1L) + PDupwindNthSymm2At23*Abs(beta2L) 
      + PDupwindNthSymm3At23*Abs(beta3L);
    
    At33rhsL = At33rhsL + beta1L*PDupwindNthAnti1At33 + 
      beta2L*PDupwindNthAnti2At33 + beta3L*PDupwindNthAnti3At33 + 
      PDupwindNthSymm1At33*Abs(beta1L) + PDupwindNthSymm2At33*Abs(beta2L) 
      + PDupwindNthSymm3At33*Abs(beta3L);
    
    alpharhsL = alpharhsL + 
      LapseAdvectionCoeff*(beta1L*PDupwindNthAnti1alpha + 
      beta2L*PDupwindNthAnti2alpha + beta3L*PDupwindNthAnti3alpha + 
      PDupwindNthSymm1alpha*Abs(beta1L) + 
      PDupwindNthSymm2alpha*Abs(beta2L) + 
      PDupwindNthSymm3alpha*Abs(beta3L));
    
    ArhsL = ArhsL + 
      LapseACoeff*(LapseAdvectionCoeff*(beta1L*PDupwindNthAnti1A + 
      beta2L*PDupwindNthAnti2A + beta3L*PDupwindNthAnti3A + 
      PDupwindNthSymm1A*Abs(beta1L) + PDupwindNthSymm2A*Abs(beta2L) + 
      PDupwindNthSymm3A*Abs(beta3L)) - (-1 + 
      LapseAdvectionCoeff)*(beta1L*PDupwindNthAnti1trK + 
      beta2L*PDupwindNthAnti2trK + beta3L*PDupwindNthAnti3trK + 
      PDupwindNthSymm1trK*Abs(beta1L) + PDupwindNthSymm2trK*Abs(beta2L) + 
      PDupwindNthSymm3trK*Abs(beta3L)));
    
    beta1rhsL = beta1rhsL + 
      ShiftAdvectionCoeff*(beta1L*PDupwindNthAnti1beta1 + 
      beta2L*PDupwindNthAnti2beta1 + beta3L*PDupwindNthAnti3beta1 + 
      PDupwindNthSymm1beta1*Abs(beta1L) + 
      PDupwindNthSymm2beta1*Abs(beta2L) + 
      PDupwindNthSymm3beta1*Abs(beta3L));
    
    beta2rhsL = beta2rhsL + 
      ShiftAdvectionCoeff*(beta1L*PDupwindNthAnti1beta2 + 
      beta2L*PDupwindNthAnti2beta2 + beta3L*PDupwindNthAnti3beta2 + 
      PDupwindNthSymm1beta2*Abs(beta1L) + 
      PDupwindNthSymm2beta2*Abs(beta2L) + 
      PDupwindNthSymm3beta2*Abs(beta3L));
    
    beta3rhsL = beta3rhsL + 
      ShiftAdvectionCoeff*(beta1L*PDupwindNthAnti1beta3 + 
      beta2L*PDupwindNthAnti2beta3 + beta3L*PDupwindNthAnti3beta3 + 
      PDupwindNthSymm1beta3*Abs(beta1L) + 
      PDupwindNthSymm2beta3*Abs(beta2L) + 
      PDupwindNthSymm3beta3*Abs(beta3L));
    
    B1rhsL = B1rhsL + 
      ShiftBCoeff*(ShiftAdvectionCoeff*(beta1L*PDupwindNthAnti1B1 + 
      beta2L*PDupwindNthAnti2B1 + beta3L*PDupwindNthAnti3B1 + 
      PDupwindNthSymm1B1*Abs(beta1L) + PDupwindNthSymm2B1*Abs(beta2L) + 
      PDupwindNthSymm3B1*Abs(beta3L)) - (-1 + 
      ShiftAdvectionCoeff)*(beta1L*PDupwindNthAnti1Xt1 + 
      beta2L*PDupwindNthAnti2Xt1 + beta3L*PDupwindNthAnti3Xt1 + 
      PDupwindNthSymm1Xt1*Abs(beta1L) + PDupwindNthSymm2Xt1*Abs(beta2L) + 
      PDupwindNthSymm3Xt1*Abs(beta3L)));
    
    B2rhsL = B2rhsL + 
      ShiftBCoeff*(ShiftAdvectionCoeff*(beta1L*PDupwindNthAnti1B2 + 
      beta2L*PDupwindNthAnti2B2 + beta3L*PDupwindNthAnti3B2 + 
      PDupwindNthSymm1B2*Abs(beta1L) + PDupwindNthSymm2B2*Abs(beta2L) + 
      PDupwindNthSymm3B2*Abs(beta3L)) - (-1 + 
      ShiftAdvectionCoeff)*(beta1L*PDupwindNthAnti1Xt2 + 
      beta2L*PDupwindNthAnti2Xt2 + beta3L*PDupwindNthAnti3Xt2 + 
      PDupwindNthSymm1Xt2*Abs(beta1L) + PDupwindNthSymm2Xt2*Abs(beta2L) + 
      PDupwindNthSymm3Xt2*Abs(beta3L)));
    
    B3rhsL = B3rhsL + 
      ShiftBCoeff*(ShiftAdvectionCoeff*(beta1L*PDupwindNthAnti1B3 + 
      beta2L*PDupwindNthAnti2B3 + beta3L*PDupwindNthAnti3B3 + 
      PDupwindNthSymm1B3*Abs(beta1L) + PDupwindNthSymm2B3*Abs(beta2L) + 
      PDupwindNthSymm3B3*Abs(beta3L)) - (-1 + 
      ShiftAdvectionCoeff)*(beta1L*PDupwindNthAnti1Xt3 + 
      beta2L*PDupwindNthAnti2Xt3 + beta3L*PDupwindNthAnti3Xt3 + 
      PDupwindNthSymm1Xt3*Abs(beta1L) + PDupwindNthSymm2Xt3*Abs(beta2L) + 
      PDupwindNthSymm3Xt3*Abs(beta3L)));
    
    /* Copy local copies back to grid functions */
    I3D(alpharhs,0,0,0) = alpharhsL;
    I3D(Arhs,0,0,0) = ArhsL;
    I3D(At11rhs,0,0,0) = At11rhsL;
    I3D(At12rhs,0,0,0) = At12rhsL;
    I3D(At13rhs,0,0,0) = At13rhsL;
    I3D(At22rhs,0,0,0) = At22rhsL;
    I3D(At23rhs,0,0,0) = At23rhsL;
    I3D(At33rhs,0,0,0) = At33rhsL;
    I3D(B1rhs,0,0,0) = B1rhsL;
    I3D(B2rhs,0,0,0) = B2rhsL;
    I3D(B3rhs,0,0,0) = B3rhsL;
    I3D(beta1rhs,0,0,0) = beta1rhsL;
    I3D(beta2rhs,0,0,0) = beta2rhsL;
    I3D(beta3rhs,0,0,0) = beta3rhsL;
    I3D(gt11rhs,0,0,0) = gt11rhsL;
    I3D(gt12rhs,0,0,0) = gt12rhsL;
    I3D(gt13rhs,0,0,0) = gt13rhsL;
    I3D(gt22rhs,0,0,0) = gt22rhsL;
    I3D(gt23rhs,0,0,0) = gt23rhsL;
    I3D(gt33rhs,0,0,0) = gt33rhsL;
    I3D(phirhs,0,0,0) = phirhsL;
    I3D(trKrhs,0,0,0) = trKrhsL;
    I3D(Xt1rhs,0,0,0) = Xt1rhsL;
    I3D(Xt2rhs,0,0,0) = Xt2rhsL;
    I3D(Xt3rhs,0,0,0) = Xt3rhsL;
    
  CAKERNEL_ML_BSSN_Advect_Computations_End
  
CAKERNEL_ML_BSSN_Advect_End
