#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define QAD(x) (SQR(SQR(x)))
#define INV(x) ((1.0) / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * (x) * (x))

CAKERNEL_ML_BSSN_Advect_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  CCTK_REAL const dx = params.cagh_dx;
  CCTK_REAL const dy = params.cagh_dy;
  CCTK_REAL const dz = params.cagh_dz;
  CCTK_REAL const dt = params.cagh_dt;
  CCTK_REAL const t = params.cagh_time;
  CCTK_REAL const dxi = INV(dx);
  CCTK_REAL const dyi = INV(dy);
  CCTK_REAL const dzi = INV(dz);
  CCTK_REAL const khalf = 0.5;
  CCTK_REAL const kthird = 1/3.0;
  CCTK_REAL const ktwothird = 2.0/3.0;
  CCTK_REAL const kfourthird = 4.0/3.0;
  CCTK_REAL const keightthird = 8.0/3.0;
  CCTK_REAL const hdxi = 0.5 * dxi;
  CCTK_REAL const hdyi = 0.5 * dyi;
  CCTK_REAL const hdzi = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  CCTK_REAL const p1o16dx = 0.0625*INV(dx);
  CCTK_REAL const p1o16dy = 0.0625*INV(dy);
  CCTK_REAL const p1o16dz = 0.0625*INV(dz);
  CCTK_REAL const p1o2dx = 0.5*INV(dx);
  CCTK_REAL const p1o2dy = 0.5*INV(dy);
  CCTK_REAL const p1o2dz = 0.5*INV(dz);
  CCTK_REAL const p1o4dx = 0.25*INV(dx);
  CCTK_REAL const p1o4dxdy = 0.25*INV(dx*dy);
  CCTK_REAL const p1o4dxdz = 0.25*INV(dx*dz);
  CCTK_REAL const p1o4dy = 0.25*INV(dy);
  CCTK_REAL const p1o4dydz = 0.25*INV(dy*dz);
  CCTK_REAL const p1o4dz = 0.25*INV(dz);
  CCTK_REAL const p1odx = INV(dx);
  CCTK_REAL const p1odx2 = INV(SQR(dx));
  CCTK_REAL const p1ody = INV(dy);
  CCTK_REAL const p1ody2 = INV(SQR(dy));
  CCTK_REAL const p1odz = INV(dz);
  CCTK_REAL const p1odz2 = INV(SQR(dz));
  CCTK_REAL const pm1o2dx = -0.5*INV(dx);
  CCTK_REAL const pm1o2dy = -0.5*INV(dy);
  CCTK_REAL const pm1o2dz = -0.5*INV(dz);
  CCTK_REAL const pm1o4dx = -0.25*INV(dx);
  CCTK_REAL const pm1o4dy = -0.25*INV(dy);
  CCTK_REAL const pm1o4dz = -0.25*INV(dz);
  
  /* Assign local copies of arrays functions */
  
  
  
  /* Calculate temporaries and arrays functions */
  
  /* Copy local copies back to grid functions */
  CAKERNEL_ML_BSSN_Advect_Computations_Begin
    
    /* Assign local copies of grid functions */
    
    CCTK_REAL AL = I3D(A,0,0,0);
    CCTK_REAL alphaL = I3D(alpha,0,0,0);
    CCTK_REAL alpharhsL = I3D(alpharhs,0,0,0);
    CCTK_REAL ArhsL = I3D(Arhs,0,0,0);
    CCTK_REAL At11L = I3D(At11,0,0,0);
    CCTK_REAL At11rhsL = I3D(At11rhs,0,0,0);
    CCTK_REAL At12L = I3D(At12,0,0,0);
    CCTK_REAL At12rhsL = I3D(At12rhs,0,0,0);
    CCTK_REAL At13L = I3D(At13,0,0,0);
    CCTK_REAL At13rhsL = I3D(At13rhs,0,0,0);
    CCTK_REAL At22L = I3D(At22,0,0,0);
    CCTK_REAL At22rhsL = I3D(At22rhs,0,0,0);
    CCTK_REAL At23L = I3D(At23,0,0,0);
    CCTK_REAL At23rhsL = I3D(At23rhs,0,0,0);
    CCTK_REAL At33L = I3D(At33,0,0,0);
    CCTK_REAL At33rhsL = I3D(At33rhs,0,0,0);
    CCTK_REAL B1L = I3D(B1,0,0,0);
    CCTK_REAL B1rhsL = I3D(B1rhs,0,0,0);
    CCTK_REAL B2L = I3D(B2,0,0,0);
    CCTK_REAL B2rhsL = I3D(B2rhs,0,0,0);
    CCTK_REAL B3L = I3D(B3,0,0,0);
    CCTK_REAL B3rhsL = I3D(B3rhs,0,0,0);
    CCTK_REAL beta1L = I3D(beta1,0,0,0);
    CCTK_REAL beta1rhsL = I3D(beta1rhs,0,0,0);
    CCTK_REAL beta2L = I3D(beta2,0,0,0);
    CCTK_REAL beta2rhsL = I3D(beta2rhs,0,0,0);
    CCTK_REAL beta3L = I3D(beta3,0,0,0);
    CCTK_REAL beta3rhsL = I3D(beta3rhs,0,0,0);
    CCTK_REAL gt11L = I3D(gt11,0,0,0);
    CCTK_REAL gt11rhsL = I3D(gt11rhs,0,0,0);
    CCTK_REAL gt12L = I3D(gt12,0,0,0);
    CCTK_REAL gt12rhsL = I3D(gt12rhs,0,0,0);
    CCTK_REAL gt13L = I3D(gt13,0,0,0);
    CCTK_REAL gt13rhsL = I3D(gt13rhs,0,0,0);
    CCTK_REAL gt22L = I3D(gt22,0,0,0);
    CCTK_REAL gt22rhsL = I3D(gt22rhs,0,0,0);
    CCTK_REAL gt23L = I3D(gt23,0,0,0);
    CCTK_REAL gt23rhsL = I3D(gt23rhs,0,0,0);
    CCTK_REAL gt33L = I3D(gt33,0,0,0);
    CCTK_REAL gt33rhsL = I3D(gt33rhs,0,0,0);
    CCTK_REAL phiL = I3D(phi,0,0,0);
    CCTK_REAL phirhsL = I3D(phirhs,0,0,0);
    CCTK_REAL trKL = I3D(trK,0,0,0);
    CCTK_REAL trKrhsL = I3D(trKrhs,0,0,0);
    CCTK_REAL Xt1L = I3D(Xt1,0,0,0);
    CCTK_REAL Xt1rhsL = I3D(Xt1rhs,0,0,0);
    CCTK_REAL Xt2L = I3D(Xt2,0,0,0);
    CCTK_REAL Xt2rhsL = I3D(Xt2rhs,0,0,0);
    CCTK_REAL Xt3L = I3D(Xt3,0,0,0);
    CCTK_REAL Xt3rhsL = I3D(Xt3rhs,0,0,0);
    
    
    /* Include user supplied include files */
    
    /* Precompute derivatives */
    CCTK_REAL const PDstandardNth1A = PDstandardNth1(A);
    CCTK_REAL const PDstandardNth2A = PDstandardNth2(A);
    CCTK_REAL const PDstandardNth3A = PDstandardNth3(A);
    CCTK_REAL const PDstandardNth1alpha = PDstandardNth1(alpha);
    CCTK_REAL const PDstandardNth2alpha = PDstandardNth2(alpha);
    CCTK_REAL const PDstandardNth3alpha = PDstandardNth3(alpha);
    CCTK_REAL const PDstandardNth1At11 = PDstandardNth1(At11);
    CCTK_REAL const PDstandardNth2At11 = PDstandardNth2(At11);
    CCTK_REAL const PDstandardNth3At11 = PDstandardNth3(At11);
    CCTK_REAL const PDstandardNth1At12 = PDstandardNth1(At12);
    CCTK_REAL const PDstandardNth2At12 = PDstandardNth2(At12);
    CCTK_REAL const PDstandardNth3At12 = PDstandardNth3(At12);
    CCTK_REAL const PDstandardNth1At13 = PDstandardNth1(At13);
    CCTK_REAL const PDstandardNth2At13 = PDstandardNth2(At13);
    CCTK_REAL const PDstandardNth3At13 = PDstandardNth3(At13);
    CCTK_REAL const PDstandardNth1At22 = PDstandardNth1(At22);
    CCTK_REAL const PDstandardNth2At22 = PDstandardNth2(At22);
    CCTK_REAL const PDstandardNth3At22 = PDstandardNth3(At22);
    CCTK_REAL const PDstandardNth1At23 = PDstandardNth1(At23);
    CCTK_REAL const PDstandardNth2At23 = PDstandardNth2(At23);
    CCTK_REAL const PDstandardNth3At23 = PDstandardNth3(At23);
    CCTK_REAL const PDstandardNth1At33 = PDstandardNth1(At33);
    CCTK_REAL const PDstandardNth2At33 = PDstandardNth2(At33);
    CCTK_REAL const PDstandardNth3At33 = PDstandardNth3(At33);
    CCTK_REAL const PDstandardNth1B1 = PDstandardNth1(B1);
    CCTK_REAL const PDstandardNth2B1 = PDstandardNth2(B1);
    CCTK_REAL const PDstandardNth3B1 = PDstandardNth3(B1);
    CCTK_REAL const PDstandardNth1B2 = PDstandardNth1(B2);
    CCTK_REAL const PDstandardNth2B2 = PDstandardNth2(B2);
    CCTK_REAL const PDstandardNth3B2 = PDstandardNth3(B2);
    CCTK_REAL const PDstandardNth1B3 = PDstandardNth1(B3);
    CCTK_REAL const PDstandardNth2B3 = PDstandardNth2(B3);
    CCTK_REAL const PDstandardNth3B3 = PDstandardNth3(B3);
    CCTK_REAL const PDstandardNth1beta1 = PDstandardNth1(beta1);
    CCTK_REAL const PDstandardNth2beta1 = PDstandardNth2(beta1);
    CCTK_REAL const PDstandardNth3beta1 = PDstandardNth3(beta1);
    CCTK_REAL const PDstandardNth1beta2 = PDstandardNth1(beta2);
    CCTK_REAL const PDstandardNth2beta2 = PDstandardNth2(beta2);
    CCTK_REAL const PDstandardNth3beta2 = PDstandardNth3(beta2);
    CCTK_REAL const PDstandardNth1beta3 = PDstandardNth1(beta3);
    CCTK_REAL const PDstandardNth2beta3 = PDstandardNth2(beta3);
    CCTK_REAL const PDstandardNth3beta3 = PDstandardNth3(beta3);
    CCTK_REAL const PDstandardNth1gt11 = PDstandardNth1(gt11);
    CCTK_REAL const PDstandardNth2gt11 = PDstandardNth2(gt11);
    CCTK_REAL const PDstandardNth3gt11 = PDstandardNth3(gt11);
    CCTK_REAL const PDstandardNth1gt12 = PDstandardNth1(gt12);
    CCTK_REAL const PDstandardNth2gt12 = PDstandardNth2(gt12);
    CCTK_REAL const PDstandardNth3gt12 = PDstandardNth3(gt12);
    CCTK_REAL const PDstandardNth1gt13 = PDstandardNth1(gt13);
    CCTK_REAL const PDstandardNth2gt13 = PDstandardNth2(gt13);
    CCTK_REAL const PDstandardNth3gt13 = PDstandardNth3(gt13);
    CCTK_REAL const PDstandardNth1gt22 = PDstandardNth1(gt22);
    CCTK_REAL const PDstandardNth2gt22 = PDstandardNth2(gt22);
    CCTK_REAL const PDstandardNth3gt22 = PDstandardNth3(gt22);
    CCTK_REAL const PDstandardNth1gt23 = PDstandardNth1(gt23);
    CCTK_REAL const PDstandardNth2gt23 = PDstandardNth2(gt23);
    CCTK_REAL const PDstandardNth3gt23 = PDstandardNth3(gt23);
    CCTK_REAL const PDstandardNth1gt33 = PDstandardNth1(gt33);
    CCTK_REAL const PDstandardNth2gt33 = PDstandardNth2(gt33);
    CCTK_REAL const PDstandardNth3gt33 = PDstandardNth3(gt33);
    CCTK_REAL const PDstandardNth1phi = PDstandardNth1(phi);
    CCTK_REAL const PDstandardNth2phi = PDstandardNth2(phi);
    CCTK_REAL const PDstandardNth3phi = PDstandardNth3(phi);
    CCTK_REAL const PDstandardNth1trK = PDstandardNth1(trK);
    CCTK_REAL const PDstandardNth2trK = PDstandardNth2(trK);
    CCTK_REAL const PDstandardNth3trK = PDstandardNth3(trK);
    CCTK_REAL const PDstandardNth1Xt1 = PDstandardNth1(Xt1);
    CCTK_REAL const PDstandardNth2Xt1 = PDstandardNth2(Xt1);
    CCTK_REAL const PDstandardNth3Xt1 = PDstandardNth3(Xt1);
    CCTK_REAL const PDstandardNth1Xt2 = PDstandardNth1(Xt2);
    CCTK_REAL const PDstandardNth2Xt2 = PDstandardNth2(Xt2);
    CCTK_REAL const PDstandardNth3Xt2 = PDstandardNth3(Xt2);
    CCTK_REAL const PDstandardNth1Xt3 = PDstandardNth1(Xt3);
    CCTK_REAL const PDstandardNth2Xt3 = PDstandardNth2(Xt3);
    CCTK_REAL const PDstandardNth3Xt3 = PDstandardNth3(Xt3);
    
    /* Calculate temporaries and grid functions */
    ptrdiff_t dir1 = Sign(beta1L);
    
    ptrdiff_t dir2 = Sign(beta2L);
    
    ptrdiff_t dir3 = Sign(beta3L);
    
    phirhsL = phirhsL + beta1L*PDstandardNth1phi + 
      beta2L*PDstandardNth2phi + beta3L*PDstandardNth3phi;
    
    gt11rhsL = gt11rhsL + beta1L*PDstandardNth1gt11 + 
      beta2L*PDstandardNth2gt11 + beta3L*PDstandardNth3gt11;
    
    gt12rhsL = gt12rhsL + beta1L*PDstandardNth1gt12 + 
      beta2L*PDstandardNth2gt12 + beta3L*PDstandardNth3gt12;
    
    gt13rhsL = gt13rhsL + beta1L*PDstandardNth1gt13 + 
      beta2L*PDstandardNth2gt13 + beta3L*PDstandardNth3gt13;
    
    gt22rhsL = gt22rhsL + beta1L*PDstandardNth1gt22 + 
      beta2L*PDstandardNth2gt22 + beta3L*PDstandardNth3gt22;
    
    gt23rhsL = gt23rhsL + beta1L*PDstandardNth1gt23 + 
      beta2L*PDstandardNth2gt23 + beta3L*PDstandardNth3gt23;
    
    gt33rhsL = gt33rhsL + beta1L*PDstandardNth1gt33 + 
      beta2L*PDstandardNth2gt33 + beta3L*PDstandardNth3gt33;
    
    Xt1rhsL = Xt1rhsL + beta1L*PDstandardNth1Xt1 + 
      beta2L*PDstandardNth2Xt1 + beta3L*PDstandardNth3Xt1;
    
    Xt2rhsL = Xt2rhsL + beta1L*PDstandardNth1Xt2 + 
      beta2L*PDstandardNth2Xt2 + beta3L*PDstandardNth3Xt2;
    
    Xt3rhsL = Xt3rhsL + beta1L*PDstandardNth1Xt3 + 
      beta2L*PDstandardNth2Xt3 + beta3L*PDstandardNth3Xt3;
    
    trKrhsL = trKrhsL + beta1L*PDstandardNth1trK + 
      beta2L*PDstandardNth2trK + beta3L*PDstandardNth3trK;
    
    At11rhsL = At11rhsL + beta1L*PDstandardNth1At11 + 
      beta2L*PDstandardNth2At11 + beta3L*PDstandardNth3At11;
    
    At12rhsL = At12rhsL + beta1L*PDstandardNth1At12 + 
      beta2L*PDstandardNth2At12 + beta3L*PDstandardNth3At12;
    
    At13rhsL = At13rhsL + beta1L*PDstandardNth1At13 + 
      beta2L*PDstandardNth2At13 + beta3L*PDstandardNth3At13;
    
    At22rhsL = At22rhsL + beta1L*PDstandardNth1At22 + 
      beta2L*PDstandardNth2At22 + beta3L*PDstandardNth3At22;
    
    At23rhsL = At23rhsL + beta1L*PDstandardNth1At23 + 
      beta2L*PDstandardNth2At23 + beta3L*PDstandardNth3At23;
    
    At33rhsL = At33rhsL + beta1L*PDstandardNth1At33 + 
      beta2L*PDstandardNth2At33 + beta3L*PDstandardNth3At33;
    
    alpharhsL = alpharhsL + (beta1L*PDstandardNth1alpha + 
      beta2L*PDstandardNth2alpha + 
      beta3L*PDstandardNth3alpha)*ToReal(LapseAdvectionCoeff);
    
    ArhsL = ArhsL + ToReal(LapseACoeff)*((-(beta1L*PDstandardNth1trK) 
      - beta2L*PDstandardNth2trK - beta3L*PDstandardNth3trK)*(-1 + 
      ToReal(LapseAdvectionCoeff)) + 
      beta1L*PDstandardNth1A*ToReal(LapseAdvectionCoeff) + 
      beta2L*PDstandardNth2A*ToReal(LapseAdvectionCoeff) + 
      beta3L*PDstandardNth3A*ToReal(LapseAdvectionCoeff));
    
    beta1rhsL = beta1rhsL + (beta1L*PDstandardNth1beta1 + 
      beta2L*PDstandardNth2beta1 + 
      beta3L*PDstandardNth3beta1)*ToReal(ShiftAdvectionCoeff);
    
    beta2rhsL = beta2rhsL + (beta1L*PDstandardNth1beta2 + 
      beta2L*PDstandardNth2beta2 + 
      beta3L*PDstandardNth3beta2)*ToReal(ShiftAdvectionCoeff);
    
    beta3rhsL = beta3rhsL + (beta1L*PDstandardNth1beta3 + 
      beta2L*PDstandardNth2beta3 + 
      beta3L*PDstandardNth3beta3)*ToReal(ShiftAdvectionCoeff);
    
    B1rhsL = B1rhsL + ((-(beta1L*PDstandardNth1Xt1) - 
      beta2L*PDstandardNth2Xt1 - beta3L*PDstandardNth3Xt1)*(-1 + 
      ToReal(ShiftAdvectionCoeff)) + 
      beta1L*PDstandardNth1B1*ToReal(ShiftAdvectionCoeff) + 
      beta2L*PDstandardNth2B1*ToReal(ShiftAdvectionCoeff) + 
      beta3L*PDstandardNth3B1*ToReal(ShiftAdvectionCoeff))*ToReal(ShiftBCoeff);
    
    B2rhsL = B2rhsL + ((-(beta1L*PDstandardNth1Xt2) - 
      beta2L*PDstandardNth2Xt2 - beta3L*PDstandardNth3Xt2)*(-1 + 
      ToReal(ShiftAdvectionCoeff)) + 
      beta1L*PDstandardNth1B2*ToReal(ShiftAdvectionCoeff) + 
      beta2L*PDstandardNth2B2*ToReal(ShiftAdvectionCoeff) + 
      beta3L*PDstandardNth3B2*ToReal(ShiftAdvectionCoeff))*ToReal(ShiftBCoeff);
    
    B3rhsL = B3rhsL + ((-(beta1L*PDstandardNth1Xt3) - 
      beta2L*PDstandardNth2Xt3 - beta3L*PDstandardNth3Xt3)*(-1 + 
      ToReal(ShiftAdvectionCoeff)) + 
      beta1L*PDstandardNth1B3*ToReal(ShiftAdvectionCoeff) + 
      beta2L*PDstandardNth2B3*ToReal(ShiftAdvectionCoeff) + 
      beta3L*PDstandardNth3B3*ToReal(ShiftAdvectionCoeff))*ToReal(ShiftBCoeff);
    
    /* Copy local copies back to grid functions */
    I3D(alpharhs,0,0,0) = alpharhsL;
    I3D(Arhs,0,0,0) = ArhsL;
    I3D(At11rhs,0,0,0) = At11rhsL;
    I3D(At12rhs,0,0,0) = At12rhsL;
    I3D(At13rhs,0,0,0) = At13rhsL;
    I3D(At22rhs,0,0,0) = At22rhsL;
    I3D(At23rhs,0,0,0) = At23rhsL;
    I3D(At33rhs,0,0,0) = At33rhsL;
    I3D(B1rhs,0,0,0) = B1rhsL;
    I3D(B2rhs,0,0,0) = B2rhsL;
    I3D(B3rhs,0,0,0) = B3rhsL;
    I3D(beta1rhs,0,0,0) = beta1rhsL;
    I3D(beta2rhs,0,0,0) = beta2rhsL;
    I3D(beta3rhs,0,0,0) = beta3rhsL;
    I3D(gt11rhs,0,0,0) = gt11rhsL;
    I3D(gt12rhs,0,0,0) = gt12rhsL;
    I3D(gt13rhs,0,0,0) = gt13rhsL;
    I3D(gt22rhs,0,0,0) = gt22rhsL;
    I3D(gt23rhs,0,0,0) = gt23rhsL;
    I3D(gt33rhs,0,0,0) = gt33rhsL;
    I3D(phirhs,0,0,0) = phirhsL;
    I3D(trKrhs,0,0,0) = trKrhsL;
    I3D(Xt1rhs,0,0,0) = Xt1rhsL;
    I3D(Xt2rhs,0,0,0) = Xt2rhsL;
    I3D(Xt3rhs,0,0,0) = Xt3rhsL;
    
  CAKERNEL_ML_BSSN_Advect_Computations_End
  
CAKERNEL_ML_BSSN_Advect_End
