#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define INV(x) ((CCTK_REAL)1.0 / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * SQR(x))
#define QAD(x) (SQR(SQR(x)))

CAKERNEL_DEVICE_ML_BSSN_RHS_Dalpha_3_etc_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  const CCTK_REAL dx CCTK_ATTRIBUTE_UNUSED = params.cagh_dx;
  const CCTK_REAL dy CCTK_ATTRIBUTE_UNUSED = params.cagh_dy;
  const CCTK_REAL dz CCTK_ATTRIBUTE_UNUSED = params.cagh_dz;
  const CCTK_REAL dt CCTK_ATTRIBUTE_UNUSED = params.cagh_dt;
  const CCTK_REAL t CCTK_ATTRIBUTE_UNUSED = params.cagh_time;
  const CCTK_REAL dxi CCTK_ATTRIBUTE_UNUSED = INV(dx);
  const CCTK_REAL dyi CCTK_ATTRIBUTE_UNUSED = INV(dy);
  const CCTK_REAL dzi CCTK_ATTRIBUTE_UNUSED = INV(dz);
  const CCTK_REAL khalf CCTK_ATTRIBUTE_UNUSED = 0.5;
  const CCTK_REAL kthird CCTK_ATTRIBUTE_UNUSED = 1/3.0;
  const CCTK_REAL ktwothird CCTK_ATTRIBUTE_UNUSED = 2.0/3.0;
  const CCTK_REAL kfourthird CCTK_ATTRIBUTE_UNUSED = 4.0/3.0;
  const CCTK_REAL keightthird CCTK_ATTRIBUTE_UNUSED = 8.0/3.0;
  const CCTK_REAL hdxi CCTK_ATTRIBUTE_UNUSED = 0.5 * dxi;
  const CCTK_REAL hdyi CCTK_ATTRIBUTE_UNUSED = 0.5 * dyi;
  const CCTK_REAL hdzi CCTK_ATTRIBUTE_UNUSED = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  const CCTK_REAL p1o1024dx CCTK_ATTRIBUTE_UNUSED = 0.0009765625*INV(dx);
  const CCTK_REAL p1o1024dy CCTK_ATTRIBUTE_UNUSED = 0.0009765625*INV(dy);
  const CCTK_REAL p1o1024dz CCTK_ATTRIBUTE_UNUSED = 0.0009765625*INV(dz);
  const CCTK_REAL p1o1680dx CCTK_ATTRIBUTE_UNUSED = 0.000595238095238095238095238095238*INV(dx);
  const CCTK_REAL p1o1680dy CCTK_ATTRIBUTE_UNUSED = 0.000595238095238095238095238095238*INV(dy);
  const CCTK_REAL p1o1680dz CCTK_ATTRIBUTE_UNUSED = 0.000595238095238095238095238095238*INV(dz);
  const CCTK_REAL p1o2dx CCTK_ATTRIBUTE_UNUSED = 0.5*INV(dx);
  const CCTK_REAL p1o2dy CCTK_ATTRIBUTE_UNUSED = 0.5*INV(dy);
  const CCTK_REAL p1o2dz CCTK_ATTRIBUTE_UNUSED = 0.5*INV(dz);
  const CCTK_REAL p1o5040dx2 CCTK_ATTRIBUTE_UNUSED = 0.000198412698412698412698412698413*INV(SQR(dx));
  const CCTK_REAL p1o5040dy2 CCTK_ATTRIBUTE_UNUSED = 0.000198412698412698412698412698413*INV(SQR(dy));
  const CCTK_REAL p1o5040dz2 CCTK_ATTRIBUTE_UNUSED = 0.000198412698412698412698412698413*INV(SQR(dz));
  const CCTK_REAL p1o560dx CCTK_ATTRIBUTE_UNUSED = 0.00178571428571428571428571428571*INV(dx);
  const CCTK_REAL p1o560dy CCTK_ATTRIBUTE_UNUSED = 0.00178571428571428571428571428571*INV(dy);
  const CCTK_REAL p1o560dz CCTK_ATTRIBUTE_UNUSED = 0.00178571428571428571428571428571*INV(dz);
  const CCTK_REAL p1o705600dxdy CCTK_ATTRIBUTE_UNUSED = 1.41723356009070294784580498866e-6*INV(dx*dy);
  const CCTK_REAL p1o705600dxdz CCTK_ATTRIBUTE_UNUSED = 1.41723356009070294784580498866e-6*INV(dx*dz);
  const CCTK_REAL p1o705600dydz CCTK_ATTRIBUTE_UNUSED = 1.41723356009070294784580498866e-6*INV(dy*dz);
  const CCTK_REAL p1o840dx CCTK_ATTRIBUTE_UNUSED = 0.00119047619047619047619047619048*INV(dx);
  const CCTK_REAL p1o840dy CCTK_ATTRIBUTE_UNUSED = 0.00119047619047619047619047619048*INV(dy);
  const CCTK_REAL p1o840dz CCTK_ATTRIBUTE_UNUSED = 0.00119047619047619047619047619048*INV(dz);
  const CCTK_REAL p1odx CCTK_ATTRIBUTE_UNUSED = INV(dx);
  const CCTK_REAL p1ody CCTK_ATTRIBUTE_UNUSED = INV(dy);
  const CCTK_REAL p1odz CCTK_ATTRIBUTE_UNUSED = INV(dz);
  const CCTK_REAL pm1o2dx CCTK_ATTRIBUTE_UNUSED = -0.5*INV(dx);
  const CCTK_REAL pm1o2dy CCTK_ATTRIBUTE_UNUSED = -0.5*INV(dy);
  const CCTK_REAL pm1o2dz CCTK_ATTRIBUTE_UNUSED = -0.5*INV(dz);
  const CCTK_REAL pm1o840dx CCTK_ATTRIBUTE_UNUSED = -0.00119047619047619047619047619048*INV(dx);
  const CCTK_REAL pm1o840dy CCTK_ATTRIBUTE_UNUSED = -0.00119047619047619047619047619048*INV(dy);
  const CCTK_REAL pm1o840dz CCTK_ATTRIBUTE_UNUSED = -0.00119047619047619047619047619048*INV(dz);
  CAKERNEL_DEVICE_ML_BSSN_RHS_Dalpha_3_etc_Computations_Begin
    
    /* Calculate temporaries and grid functions */
    I3D(DPDstandardNthalpha3,0,0,0) = PDstandardNth3(alpha);
    I3D(DPDstandardNthalpha33,0,0,0) = PDstandardNth33(alpha);
    I3D(DPDstandardNthbeta13,0,0,0) = PDstandardNth3(beta1);
    I3D(DPDstandardNthbeta133,0,0,0) = PDstandardNth33(beta1);
    I3D(DPDstandardNthbeta23,0,0,0) = PDstandardNth3(beta2);
    I3D(DPDstandardNthbeta233,0,0,0) = PDstandardNth33(beta2);
    I3D(DPDstandardNthbeta33,0,0,0) = PDstandardNth3(beta3);
    I3D(DPDstandardNthbeta333,0,0,0) = PDstandardNth33(beta3);
    I3D(DPDstandardNthgt113,0,0,0) = PDstandardNth3(gt11);
    I3D(DPDstandardNthgt1133,0,0,0) = PDstandardNth33(gt11);
    I3D(DPDstandardNthgt123,0,0,0) = PDstandardNth3(gt12);
    I3D(DPDstandardNthgt1233,0,0,0) = PDstandardNth33(gt12);
    I3D(DPDstandardNthgt133,0,0,0) = PDstandardNth3(gt13);
    I3D(DPDstandardNthgt1333,0,0,0) = PDstandardNth33(gt13);
    I3D(DPDstandardNthgt223,0,0,0) = PDstandardNth3(gt22);
    I3D(DPDstandardNthgt2233,0,0,0) = PDstandardNth33(gt22);
    I3D(DPDstandardNthgt233,0,0,0) = PDstandardNth3(gt23);
    I3D(DPDstandardNthgt2333,0,0,0) = PDstandardNth33(gt23);
    I3D(DPDstandardNthgt333,0,0,0) = PDstandardNth3(gt33);
    I3D(DPDstandardNthgt3333,0,0,0) = PDstandardNth33(gt33);
    I3D(DPDstandardNthphi3,0,0,0) = PDstandardNth3(phi);
    I3D(DPDstandardNthphi33,0,0,0) = PDstandardNth33(phi);
    I3D(DPDstandardNthtrK3,0,0,0) = PDstandardNth3(trK);
    I3D(DPDstandardNthXt13,0,0,0) = PDstandardNth3(Xt1);
    I3D(DPDstandardNthXt23,0,0,0) = PDstandardNth3(Xt2);
    I3D(DPDstandardNthXt33,0,0,0) = PDstandardNth3(Xt3);
    
  CAKERNEL_DEVICE_ML_BSSN_RHS_Dalpha_3_etc_Computations_End
  
CAKERNEL_DEVICE_ML_BSSN_RHS_Dalpha_3_etc_End
