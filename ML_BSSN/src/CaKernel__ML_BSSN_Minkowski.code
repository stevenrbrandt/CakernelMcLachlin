#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define QAD(x) (SQR(SQR(x)))
#define INV(x) ((1.0) / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * (x) * (x))

CAKERNEL_ML_BSSN_Minkowski_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  CCTK_REAL const dx = params.cagh_dx;
  CCTK_REAL const dy = params.cagh_dy;
  CCTK_REAL const dz = params.cagh_dz;
  CCTK_REAL const dt = params.cagh_dt;
  CCTK_REAL const t = params.cagh_time;
  CCTK_REAL const dxi = INV(dx);
  CCTK_REAL const dyi = INV(dy);
  CCTK_REAL const dzi = INV(dz);
  CCTK_REAL const khalf = 0.5;
  CCTK_REAL const kthird = 1/3.0;
  CCTK_REAL const ktwothird = 2.0/3.0;
  CCTK_REAL const kfourthird = 4.0/3.0;
  CCTK_REAL const keightthird = 8.0/3.0;
  CCTK_REAL const hdxi = 0.5 * dxi;
  CCTK_REAL const hdyi = 0.5 * dyi;
  CCTK_REAL const hdzi = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  CCTK_REAL const p1o1024dx = 0.0009765625*INV(dx);
  CCTK_REAL const p1o1024dy = 0.0009765625*INV(dy);
  CCTK_REAL const p1o1024dz = 0.0009765625*INV(dz);
  CCTK_REAL const p1o120dx = 0.00833333333333333333333333333333*INV(dx);
  CCTK_REAL const p1o120dy = 0.00833333333333333333333333333333*INV(dy);
  CCTK_REAL const p1o120dz = 0.00833333333333333333333333333333*INV(dz);
  CCTK_REAL const p1o12dx = 0.0833333333333333333333333333333*INV(dx);
  CCTK_REAL const p1o12dy = 0.0833333333333333333333333333333*INV(dy);
  CCTK_REAL const p1o12dz = 0.0833333333333333333333333333333*INV(dz);
  CCTK_REAL const p1o144dxdy = 0.00694444444444444444444444444444*INV(dx)*INV(dy);
  CCTK_REAL const p1o144dxdz = 0.00694444444444444444444444444444*INV(dx)*INV(dz);
  CCTK_REAL const p1o144dydz = 0.00694444444444444444444444444444*INV(dy)*INV(dz);
  CCTK_REAL const p1o1680dx = 0.000595238095238095238095238095238*INV(dx);
  CCTK_REAL const p1o1680dy = 0.000595238095238095238095238095238*INV(dy);
  CCTK_REAL const p1o1680dz = 0.000595238095238095238095238095238*INV(dz);
  CCTK_REAL const p1o16dx = 0.0625*INV(dx);
  CCTK_REAL const p1o16dy = 0.0625*INV(dy);
  CCTK_REAL const p1o16dz = 0.0625*INV(dz);
  CCTK_REAL const p1o180dx2 = 0.00555555555555555555555555555556*INV(SQR(dx));
  CCTK_REAL const p1o180dy2 = 0.00555555555555555555555555555556*INV(SQR(dy));
  CCTK_REAL const p1o180dz2 = 0.00555555555555555555555555555556*INV(SQR(dz));
  CCTK_REAL const p1o24dx = 0.0416666666666666666666666666667*INV(dx);
  CCTK_REAL const p1o24dy = 0.0416666666666666666666666666667*INV(dy);
  CCTK_REAL const p1o24dz = 0.0416666666666666666666666666667*INV(dz);
  CCTK_REAL const p1o256dx = 0.00390625*INV(dx);
  CCTK_REAL const p1o256dy = 0.00390625*INV(dy);
  CCTK_REAL const p1o256dz = 0.00390625*INV(dz);
  CCTK_REAL const p1o2dx = 0.5*INV(dx);
  CCTK_REAL const p1o2dy = 0.5*INV(dy);
  CCTK_REAL const p1o2dz = 0.5*INV(dz);
  CCTK_REAL const p1o3600dxdy = 0.000277777777777777777777777777778*INV(dx)*INV(dy);
  CCTK_REAL const p1o3600dxdz = 0.000277777777777777777777777777778*INV(dx)*INV(dz);
  CCTK_REAL const p1o3600dydz = 0.000277777777777777777777777777778*INV(dy)*INV(dz);
  CCTK_REAL const p1o4dx = 0.25*INV(dx);
  CCTK_REAL const p1o4dxdy = 0.25*INV(dx)*INV(dy);
  CCTK_REAL const p1o4dxdz = 0.25*INV(dx)*INV(dz);
  CCTK_REAL const p1o4dy = 0.25*INV(dy);
  CCTK_REAL const p1o4dydz = 0.25*INV(dy)*INV(dz);
  CCTK_REAL const p1o4dz = 0.25*INV(dz);
  CCTK_REAL const p1o5040dx2 = 0.000198412698412698412698412698413*INV(SQR(dx));
  CCTK_REAL const p1o5040dy2 = 0.000198412698412698412698412698413*INV(SQR(dy));
  CCTK_REAL const p1o5040dz2 = 0.000198412698412698412698412698413*INV(SQR(dz));
  CCTK_REAL const p1o560dx = 0.00178571428571428571428571428571*INV(dx);
  CCTK_REAL const p1o560dy = 0.00178571428571428571428571428571*INV(dy);
  CCTK_REAL const p1o560dz = 0.00178571428571428571428571428571*INV(dz);
  CCTK_REAL const p1o60dx = 0.0166666666666666666666666666667*INV(dx);
  CCTK_REAL const p1o60dy = 0.0166666666666666666666666666667*INV(dy);
  CCTK_REAL const p1o60dz = 0.0166666666666666666666666666667*INV(dz);
  CCTK_REAL const p1o64dx = 0.015625*INV(dx);
  CCTK_REAL const p1o64dy = 0.015625*INV(dy);
  CCTK_REAL const p1o64dz = 0.015625*INV(dz);
  CCTK_REAL const p1o705600dxdy = 1.41723356009070294784580498866e-6*INV(dx)*INV(dy);
  CCTK_REAL const p1o705600dxdz = 1.41723356009070294784580498866e-6*INV(dx)*INV(dz);
  CCTK_REAL const p1o705600dydz = 1.41723356009070294784580498866e-6*INV(dy)*INV(dz);
  CCTK_REAL const p1o840dx = 0.00119047619047619047619047619048*INV(dx);
  CCTK_REAL const p1o840dy = 0.00119047619047619047619047619048*INV(dy);
  CCTK_REAL const p1o840dz = 0.00119047619047619047619047619048*INV(dz);
  CCTK_REAL const p1odx = INV(dx);
  CCTK_REAL const p1odx2 = INV(SQR(dx));
  CCTK_REAL const p1ody = INV(dy);
  CCTK_REAL const p1ody2 = INV(SQR(dy));
  CCTK_REAL const p1odz = INV(dz);
  CCTK_REAL const p1odz2 = INV(SQR(dz));
  CCTK_REAL const pm1o120dx = -0.00833333333333333333333333333333*INV(dx);
  CCTK_REAL const pm1o120dy = -0.00833333333333333333333333333333*INV(dy);
  CCTK_REAL const pm1o120dz = -0.00833333333333333333333333333333*INV(dz);
  CCTK_REAL const pm1o12dx2 = -0.0833333333333333333333333333333*INV(SQR(dx));
  CCTK_REAL const pm1o12dy2 = -0.0833333333333333333333333333333*INV(SQR(dy));
  CCTK_REAL const pm1o12dz2 = -0.0833333333333333333333333333333*INV(SQR(dz));
  CCTK_REAL const pm1o2dx = -0.5*INV(dx);
  CCTK_REAL const pm1o2dy = -0.5*INV(dy);
  CCTK_REAL const pm1o2dz = -0.5*INV(dz);
  CCTK_REAL const pm1o4dx = -0.25*INV(dx);
  CCTK_REAL const pm1o4dy = -0.25*INV(dy);
  CCTK_REAL const pm1o4dz = -0.25*INV(dz);
  CCTK_REAL const pm1o60dx = -0.0166666666666666666666666666667*INV(dx);
  CCTK_REAL const pm1o60dy = -0.0166666666666666666666666666667*INV(dy);
  CCTK_REAL const pm1o60dz = -0.0166666666666666666666666666667*INV(dz);
  CCTK_REAL const pm1o840dx = -0.00119047619047619047619047619048*INV(dx);
  CCTK_REAL const pm1o840dy = -0.00119047619047619047619047619048*INV(dy);
  CCTK_REAL const pm1o840dz = -0.00119047619047619047619047619048*INV(dz);
  
  /* Assign local copies of arrays functions */
  
  
  
  /* Calculate temporaries and arrays functions */
  
  /* Copy local copies back to grid functions */
  CAKERNEL_ML_BSSN_Minkowski_Computations_Begin
    
    /* Assign local copies of grid functions */
    
    
    
    /* Include user supplied include files */
    
    /* Precompute derivatives */
    
    switch(fdOrder)
    {
      case 2:
        break;
      
      case 4:
        break;
      
      case 6:
        break;
      
      case 8:
        break;
    }
    
    /* Calculate temporaries and grid functions */
    CCTK_REAL phiL = IfThen(conformalMethod,1,0);
    
    CCTK_REAL gt11L = 1;
    
    CCTK_REAL gt12L = 0;
    
    CCTK_REAL gt13L = 0;
    
    CCTK_REAL gt22L = 1;
    
    CCTK_REAL gt23L = 0;
    
    CCTK_REAL gt33L = 1;
    
    CCTK_REAL trKL = 0;
    
    CCTK_REAL At11L = 0;
    
    CCTK_REAL At12L = 0;
    
    CCTK_REAL At13L = 0;
    
    CCTK_REAL At22L = 0;
    
    CCTK_REAL At23L = 0;
    
    CCTK_REAL At33L = 0;
    
    CCTK_REAL Xt1L = 0;
    
    CCTK_REAL Xt2L = 0;
    
    CCTK_REAL Xt3L = 0;
    
    CCTK_REAL alphaL = 1;
    
    CCTK_REAL AL = 0;
    
    CCTK_REAL beta1L = 0;
    
    CCTK_REAL beta2L = 0;
    
    CCTK_REAL beta3L = 0;
    
    CCTK_REAL B1L = 0;
    
    CCTK_REAL B2L = 0;
    
    CCTK_REAL B3L = 0;
    
    /* Copy local copies back to grid functions */
    I3D(A,0,0,0) = AL;
    I3D(alpha,0,0,0) = alphaL;
    I3D(At11,0,0,0) = At11L;
    I3D(At12,0,0,0) = At12L;
    I3D(At13,0,0,0) = At13L;
    I3D(At22,0,0,0) = At22L;
    I3D(At23,0,0,0) = At23L;
    I3D(At33,0,0,0) = At33L;
    I3D(B1,0,0,0) = B1L;
    I3D(B2,0,0,0) = B2L;
    I3D(B3,0,0,0) = B3L;
    I3D(beta1,0,0,0) = beta1L;
    I3D(beta2,0,0,0) = beta2L;
    I3D(beta3,0,0,0) = beta3L;
    I3D(gt11,0,0,0) = gt11L;
    I3D(gt12,0,0,0) = gt12L;
    I3D(gt13,0,0,0) = gt13L;
    I3D(gt22,0,0,0) = gt22L;
    I3D(gt23,0,0,0) = gt23L;
    I3D(gt33,0,0,0) = gt33L;
    I3D(phi,0,0,0) = phiL;
    I3D(trK,0,0,0) = trKL;
    I3D(Xt1,0,0,0) = Xt1L;
    I3D(Xt2,0,0,0) = Xt2L;
    I3D(Xt3,0,0,0) = Xt3L;
    
  CAKERNEL_ML_BSSN_Minkowski_Computations_End
  
CAKERNEL_ML_BSSN_Minkowski_End
