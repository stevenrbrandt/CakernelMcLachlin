#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define QAD(x) (SQR(SQR(x)))
#define INV(x) ((1.0) / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * (x) * (x))

CAKERNEL_ML_BSSN_RHS1_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  CCTK_REAL const dx = params.cagh_dx;
  CCTK_REAL const dy = params.cagh_dy;
  CCTK_REAL const dz = params.cagh_dz;
  CCTK_REAL const dt = params.cagh_dt;
  CCTK_REAL const t = params.cagh_time;
  CCTK_REAL const dxi = INV(dx);
  CCTK_REAL const dyi = INV(dy);
  CCTK_REAL const dzi = INV(dz);
  CCTK_REAL const khalf = 0.5;
  CCTK_REAL const kthird = 1/3.0;
  CCTK_REAL const ktwothird = 2.0/3.0;
  CCTK_REAL const kfourthird = 4.0/3.0;
  CCTK_REAL const keightthird = 8.0/3.0;
  CCTK_REAL const hdxi = 0.5 * dxi;
  CCTK_REAL const hdyi = 0.5 * dyi;
  CCTK_REAL const hdzi = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  CCTK_REAL const p1o16dx = 0.0625*INV(dx);
  CCTK_REAL const p1o16dy = 0.0625*INV(dy);
  CCTK_REAL const p1o16dz = 0.0625*INV(dz);
  CCTK_REAL const p1o2dx = 0.5*INV(dx);
  CCTK_REAL const p1o2dy = 0.5*INV(dy);
  CCTK_REAL const p1o2dz = 0.5*INV(dz);
  CCTK_REAL const p1o4dx = 0.25*INV(dx);
  CCTK_REAL const p1o4dxdy = 0.25*INV(dx)*INV(dy);
  CCTK_REAL const p1o4dxdz = 0.25*INV(dx)*INV(dz);
  CCTK_REAL const p1o4dy = 0.25*INV(dy);
  CCTK_REAL const p1o4dydz = 0.25*INV(dy)*INV(dz);
  CCTK_REAL const p1o4dz = 0.25*INV(dz);
  CCTK_REAL const p1odx2 = INV(SQR(dx));
  CCTK_REAL const p1ody2 = INV(SQR(dy));
  CCTK_REAL const p1odz2 = INV(SQR(dz));
  CCTK_REAL const pm1o2dx = -0.5*INV(dx);
  CCTK_REAL const pm1o2dy = -0.5*INV(dy);
  CCTK_REAL const pm1o2dz = -0.5*INV(dz);
  CCTK_REAL const pm1o4dx = -0.25*INV(dx);
  CCTK_REAL const pm1o4dy = -0.25*INV(dy);
  CCTK_REAL const pm1o4dz = -0.25*INV(dz);
  
  /* Assign local copies of arrays functions */
  
  
  
  /* Calculate temporaries and arrays functions */
  
  /* Copy local copies back to grid functions */
  CAKERNEL_ML_BSSN_RHS1_Computations_Begin
    
    /* Assign local copies of grid functions */
    
    CCTK_REAL AL = I3D(A,0,0,0);
    CCTK_REAL alphaL = I3D(alpha,0,0,0);
    CCTK_REAL At11L = I3D(At11,0,0,0);
    CCTK_REAL At12L = I3D(At12,0,0,0);
    CCTK_REAL At13L = I3D(At13,0,0,0);
    CCTK_REAL At22L = I3D(At22,0,0,0);
    CCTK_REAL At23L = I3D(At23,0,0,0);
    CCTK_REAL At33L = I3D(At33,0,0,0);
    CCTK_REAL B1L = I3D(B1,0,0,0);
    CCTK_REAL B2L = I3D(B2,0,0,0);
    CCTK_REAL B3L = I3D(B3,0,0,0);
    CCTK_REAL beta1L = I3D(beta1,0,0,0);
    CCTK_REAL beta2L = I3D(beta2,0,0,0);
    CCTK_REAL beta3L = I3D(beta3,0,0,0);
    CCTK_REAL gt11L = I3D(gt11,0,0,0);
    CCTK_REAL gt12L = I3D(gt12,0,0,0);
    CCTK_REAL gt13L = I3D(gt13,0,0,0);
    CCTK_REAL gt22L = I3D(gt22,0,0,0);
    CCTK_REAL gt23L = I3D(gt23,0,0,0);
    CCTK_REAL gt33L = I3D(gt33,0,0,0);
    CCTK_REAL phiL = I3D(phi,0,0,0);
    CCTK_REAL trKL = I3D(trK,0,0,0);
    CCTK_REAL Xt1L = I3D(Xt1,0,0,0);
    CCTK_REAL Xt2L = I3D(Xt2,0,0,0);
    CCTK_REAL Xt3L = I3D(Xt3,0,0,0);
    
    
    /* Include user supplied include files */
    
    /* Precompute derivatives */
    CCTK_REAL const PDstandardNth1alpha = PDstandardNth1(alpha);
    CCTK_REAL const PDstandardNth2alpha = PDstandardNth2(alpha);
    CCTK_REAL const PDstandardNth3alpha = PDstandardNth3(alpha);
    CCTK_REAL const PDstandardNth11alpha = PDstandardNth11(alpha);
    CCTK_REAL const PDstandardNth22alpha = PDstandardNth22(alpha);
    CCTK_REAL const PDstandardNth33alpha = PDstandardNth33(alpha);
    CCTK_REAL const PDstandardNth12alpha = PDstandardNth12(alpha);
    CCTK_REAL const PDstandardNth13alpha = PDstandardNth13(alpha);
    CCTK_REAL const PDstandardNth23alpha = PDstandardNth23(alpha);
    CCTK_REAL const PDstandardNth1beta1 = PDstandardNth1(beta1);
    CCTK_REAL const PDstandardNth2beta1 = PDstandardNth2(beta1);
    CCTK_REAL const PDstandardNth3beta1 = PDstandardNth3(beta1);
    CCTK_REAL const PDstandardNth11beta1 = PDstandardNth11(beta1);
    CCTK_REAL const PDstandardNth22beta1 = PDstandardNth22(beta1);
    CCTK_REAL const PDstandardNth33beta1 = PDstandardNth33(beta1);
    CCTK_REAL const PDstandardNth12beta1 = PDstandardNth12(beta1);
    CCTK_REAL const PDstandardNth13beta1 = PDstandardNth13(beta1);
    CCTK_REAL const PDstandardNth23beta1 = PDstandardNth23(beta1);
    CCTK_REAL const PDstandardNth1beta2 = PDstandardNth1(beta2);
    CCTK_REAL const PDstandardNth2beta2 = PDstandardNth2(beta2);
    CCTK_REAL const PDstandardNth3beta2 = PDstandardNth3(beta2);
    CCTK_REAL const PDstandardNth11beta2 = PDstandardNth11(beta2);
    CCTK_REAL const PDstandardNth22beta2 = PDstandardNth22(beta2);
    CCTK_REAL const PDstandardNth33beta2 = PDstandardNth33(beta2);
    CCTK_REAL const PDstandardNth12beta2 = PDstandardNth12(beta2);
    CCTK_REAL const PDstandardNth13beta2 = PDstandardNth13(beta2);
    CCTK_REAL const PDstandardNth23beta2 = PDstandardNth23(beta2);
    CCTK_REAL const PDstandardNth1beta3 = PDstandardNth1(beta3);
    CCTK_REAL const PDstandardNth2beta3 = PDstandardNth2(beta3);
    CCTK_REAL const PDstandardNth3beta3 = PDstandardNth3(beta3);
    CCTK_REAL const PDstandardNth11beta3 = PDstandardNth11(beta3);
    CCTK_REAL const PDstandardNth22beta3 = PDstandardNth22(beta3);
    CCTK_REAL const PDstandardNth33beta3 = PDstandardNth33(beta3);
    CCTK_REAL const PDstandardNth12beta3 = PDstandardNth12(beta3);
    CCTK_REAL const PDstandardNth13beta3 = PDstandardNth13(beta3);
    CCTK_REAL const PDstandardNth23beta3 = PDstandardNth23(beta3);
    CCTK_REAL const PDstandardNth1gt11 = PDstandardNth1(gt11);
    CCTK_REAL const PDstandardNth2gt11 = PDstandardNth2(gt11);
    CCTK_REAL const PDstandardNth3gt11 = PDstandardNth3(gt11);
    CCTK_REAL const PDstandardNth1gt12 = PDstandardNth1(gt12);
    CCTK_REAL const PDstandardNth2gt12 = PDstandardNth2(gt12);
    CCTK_REAL const PDstandardNth3gt12 = PDstandardNth3(gt12);
    CCTK_REAL const PDstandardNth1gt13 = PDstandardNth1(gt13);
    CCTK_REAL const PDstandardNth2gt13 = PDstandardNth2(gt13);
    CCTK_REAL const PDstandardNth3gt13 = PDstandardNth3(gt13);
    CCTK_REAL const PDstandardNth1gt22 = PDstandardNth1(gt22);
    CCTK_REAL const PDstandardNth2gt22 = PDstandardNth2(gt22);
    CCTK_REAL const PDstandardNth3gt22 = PDstandardNth3(gt22);
    CCTK_REAL const PDstandardNth1gt23 = PDstandardNth1(gt23);
    CCTK_REAL const PDstandardNth2gt23 = PDstandardNth2(gt23);
    CCTK_REAL const PDstandardNth3gt23 = PDstandardNth3(gt23);
    CCTK_REAL const PDstandardNth1gt33 = PDstandardNth1(gt33);
    CCTK_REAL const PDstandardNth2gt33 = PDstandardNth2(gt33);
    CCTK_REAL const PDstandardNth3gt33 = PDstandardNth3(gt33);
    CCTK_REAL const PDstandardNth1phi = PDstandardNth1(phi);
    CCTK_REAL const PDstandardNth2phi = PDstandardNth2(phi);
    CCTK_REAL const PDstandardNth3phi = PDstandardNth3(phi);
    CCTK_REAL const PDstandardNth1trK = PDstandardNth1(trK);
    CCTK_REAL const PDstandardNth2trK = PDstandardNth2(trK);
    CCTK_REAL const PDstandardNth3trK = PDstandardNth3(trK);
    
    /* Calculate temporaries and grid functions */
    ptrdiff_t dir1 = Sign(beta1L);
    
    ptrdiff_t dir2 = Sign(beta2L);
    
    ptrdiff_t dir3 = Sign(beta3L);
    
    CCTK_REAL detgt = 1;
    
    CCTK_REAL gtu11 = INV(detgt)*(gt22L*gt33L - SQR(gt23L));
    
    CCTK_REAL gtu12 = (gt13L*gt23L - gt12L*gt33L)*INV(detgt);
    
    CCTK_REAL gtu13 = (-(gt13L*gt22L) + gt12L*gt23L)*INV(detgt);
    
    CCTK_REAL gtu22 = INV(detgt)*(gt11L*gt33L - SQR(gt13L));
    
    CCTK_REAL gtu23 = (gt12L*gt13L - gt11L*gt23L)*INV(detgt);
    
    CCTK_REAL gtu33 = INV(detgt)*(gt11L*gt22L - SQR(gt12L));
    
    CCTK_REAL Gtl111 = 0.5*PDstandardNth1gt11;
    
    CCTK_REAL Gtl112 = 0.5*PDstandardNth2gt11;
    
    CCTK_REAL Gtl113 = 0.5*PDstandardNth3gt11;
    
    CCTK_REAL Gtl122 = -0.5*PDstandardNth1gt22 + PDstandardNth2gt12;
    
    CCTK_REAL Gtl123 = 0.5*(-PDstandardNth1gt23 + PDstandardNth2gt13 + 
      PDstandardNth3gt12);
    
    CCTK_REAL Gtl133 = -0.5*PDstandardNth1gt33 + PDstandardNth3gt13;
    
    CCTK_REAL Gtl211 = PDstandardNth1gt12 - 0.5*PDstandardNth2gt11;
    
    CCTK_REAL Gtl212 = 0.5*PDstandardNth1gt22;
    
    CCTK_REAL Gtl213 = 0.5*(PDstandardNth1gt23 - PDstandardNth2gt13 + 
      PDstandardNth3gt12);
    
    CCTK_REAL Gtl222 = 0.5*PDstandardNth2gt22;
    
    CCTK_REAL Gtl223 = 0.5*PDstandardNth3gt22;
    
    CCTK_REAL Gtl233 = -0.5*PDstandardNth2gt33 + PDstandardNth3gt23;
    
    CCTK_REAL Gtl311 = PDstandardNth1gt13 - 0.5*PDstandardNth3gt11;
    
    CCTK_REAL Gtl312 = 0.5*(PDstandardNth1gt23 + PDstandardNth2gt13 - 
      PDstandardNth3gt12);
    
    CCTK_REAL Gtl313 = 0.5*PDstandardNth1gt33;
    
    CCTK_REAL Gtl322 = PDstandardNth2gt23 - 0.5*PDstandardNth3gt22;
    
    CCTK_REAL Gtl323 = 0.5*PDstandardNth2gt33;
    
    CCTK_REAL Gtl333 = 0.5*PDstandardNth3gt33;
    
    CCTK_REAL Gt111 = Gtl111*gtu11 + Gtl211*gtu12 + Gtl311*gtu13;
    
    CCTK_REAL Gt211 = Gtl111*gtu12 + Gtl211*gtu22 + Gtl311*gtu23;
    
    CCTK_REAL Gt311 = Gtl111*gtu13 + Gtl211*gtu23 + Gtl311*gtu33;
    
    CCTK_REAL Gt112 = Gtl112*gtu11 + Gtl212*gtu12 + Gtl312*gtu13;
    
    CCTK_REAL Gt212 = Gtl112*gtu12 + Gtl212*gtu22 + Gtl312*gtu23;
    
    CCTK_REAL Gt312 = Gtl112*gtu13 + Gtl212*gtu23 + Gtl312*gtu33;
    
    CCTK_REAL Gt113 = Gtl113*gtu11 + Gtl213*gtu12 + Gtl313*gtu13;
    
    CCTK_REAL Gt213 = Gtl113*gtu12 + Gtl213*gtu22 + Gtl313*gtu23;
    
    CCTK_REAL Gt313 = Gtl113*gtu13 + Gtl213*gtu23 + Gtl313*gtu33;
    
    CCTK_REAL Gt122 = Gtl122*gtu11 + Gtl222*gtu12 + Gtl322*gtu13;
    
    CCTK_REAL Gt222 = Gtl122*gtu12 + Gtl222*gtu22 + Gtl322*gtu23;
    
    CCTK_REAL Gt322 = Gtl122*gtu13 + Gtl222*gtu23 + Gtl322*gtu33;
    
    CCTK_REAL Gt123 = Gtl123*gtu11 + Gtl223*gtu12 + Gtl323*gtu13;
    
    CCTK_REAL Gt223 = Gtl123*gtu12 + Gtl223*gtu22 + Gtl323*gtu23;
    
    CCTK_REAL Gt323 = Gtl123*gtu13 + Gtl223*gtu23 + Gtl323*gtu33;
    
    CCTK_REAL Gt133 = Gtl133*gtu11 + Gtl233*gtu12 + Gtl333*gtu13;
    
    CCTK_REAL Gt233 = Gtl133*gtu12 + Gtl233*gtu22 + Gtl333*gtu23;
    
    CCTK_REAL Gt333 = Gtl133*gtu13 + Gtl233*gtu23 + Gtl333*gtu33;
    
    CCTK_REAL Xtn1 = Gt111*gtu11 + Gt122*gtu22 + 2*(Gt112*gtu12 + 
      Gt113*gtu13 + Gt123*gtu23) + Gt133*gtu33;
    
    CCTK_REAL Xtn2 = Gt211*gtu11 + Gt222*gtu22 + 2*(Gt212*gtu12 + 
      Gt213*gtu13 + Gt223*gtu23) + Gt233*gtu33;
    
    CCTK_REAL Xtn3 = Gt311*gtu11 + Gt322*gtu22 + 2*(Gt312*gtu12 + 
      Gt313*gtu13 + Gt323*gtu23) + Gt333*gtu33;
    
    CCTK_REAL fac1 = IfThen(conformalMethod,-0.5*INV(phiL),1);
    
    CCTK_REAL cdphi1 = fac1*PDstandardNth1phi;
    
    CCTK_REAL cdphi2 = fac1*PDstandardNth2phi;
    
    CCTK_REAL cdphi3 = fac1*PDstandardNth3phi;
    
    CCTK_REAL Atm11 = At11L*gtu11 + At12L*gtu12 + At13L*gtu13;
    
    CCTK_REAL Atm21 = At11L*gtu12 + At12L*gtu22 + At13L*gtu23;
    
    CCTK_REAL Atm31 = At11L*gtu13 + At12L*gtu23 + At13L*gtu33;
    
    CCTK_REAL Atm12 = At12L*gtu11 + At22L*gtu12 + At23L*gtu13;
    
    CCTK_REAL Atm22 = At12L*gtu12 + At22L*gtu22 + At23L*gtu23;
    
    CCTK_REAL Atm32 = At12L*gtu13 + At22L*gtu23 + At23L*gtu33;
    
    CCTK_REAL Atm13 = At13L*gtu11 + At23L*gtu12 + At33L*gtu13;
    
    CCTK_REAL Atm23 = At13L*gtu12 + At23L*gtu22 + At33L*gtu23;
    
    CCTK_REAL Atm33 = At13L*gtu13 + At23L*gtu23 + At33L*gtu33;
    
    CCTK_REAL Atu11 = Atm11*gtu11 + Atm12*gtu12 + Atm13*gtu13;
    
    CCTK_REAL Atu12 = Atm11*gtu12 + Atm12*gtu22 + Atm13*gtu23;
    
    CCTK_REAL Atu13 = Atm11*gtu13 + Atm12*gtu23 + Atm13*gtu33;
    
    CCTK_REAL Atu22 = Atm21*gtu12 + Atm22*gtu22 + Atm23*gtu23;
    
    CCTK_REAL Atu23 = Atm21*gtu13 + Atm22*gtu23 + Atm23*gtu33;
    
    CCTK_REAL Atu33 = Atm31*gtu13 + Atm32*gtu23 + Atm33*gtu33;
    
    CCTK_REAL e4phi = 
      IfThen(conformalMethod,INV(SQR(phiL)),exp(4*phiL));
    
    CCTK_REAL em4phi = INV(e4phi);
    
    CCTK_REAL phirhsL = 
      IfThen(conformalMethod,phiL*(0.333333333333333333333333333333*alphaL*trKL 
      - 0.333333333333333333333333333333*(PDstandardNth1beta1 + 
      PDstandardNth2beta2 + 
      PDstandardNth3beta3)),-0.166666666666666666666666666667*alphaL*trKL 
      + 0.166666666666666666666666666667*(PDstandardNth1beta1 + 
      PDstandardNth2beta2 + PDstandardNth3beta3));
    
    CCTK_REAL gt11rhsL = 
      -0.666666666666666666666666666667*(3*alphaL*At11L - 
      3*(gt12L*PDstandardNth1beta2 + gt13L*PDstandardNth1beta3) + 
      gt11L*(-2*PDstandardNth1beta1 + PDstandardNth2beta2 + 
      PDstandardNth3beta3));
    
    CCTK_REAL gt12rhsL = 
      0.333333333333333333333333333333*(-6*alphaL*At12L + 
      3*(gt22L*PDstandardNth1beta2 + gt23L*PDstandardNth1beta3 + 
      gt11L*PDstandardNth2beta1 + gt13L*PDstandardNth2beta3) + 
      gt12L*(PDstandardNth1beta1 + PDstandardNth2beta2 - 
      2*PDstandardNth3beta3));
    
    CCTK_REAL gt13rhsL = 
      0.333333333333333333333333333333*(-6*alphaL*At13L + 
      3*(gt23L*PDstandardNth1beta2 + gt33L*PDstandardNth1beta3 + 
      gt11L*PDstandardNth3beta1 + gt12L*PDstandardNth3beta2) + 
      gt13L*(PDstandardNth1beta1 - 2*PDstandardNth2beta2 + 
      PDstandardNth3beta3));
    
    CCTK_REAL gt22rhsL = 
      -0.666666666666666666666666666667*(3*alphaL*At22L - 
      3*(gt12L*PDstandardNth2beta1 + gt23L*PDstandardNth2beta3) + 
      gt22L*(PDstandardNth1beta1 - 2*PDstandardNth2beta2 + 
      PDstandardNth3beta3));
    
    CCTK_REAL gt23rhsL = 
      0.333333333333333333333333333333*(-6*alphaL*At23L + 
      3*(gt13L*PDstandardNth2beta1 + gt33L*PDstandardNth2beta3 + 
      gt12L*PDstandardNth3beta1 + gt22L*PDstandardNth3beta2) + 
      gt23L*(-2*PDstandardNth1beta1 + PDstandardNth2beta2 + 
      PDstandardNth3beta3));
    
    CCTK_REAL gt33rhsL = 
      -0.666666666666666666666666666667*(3*alphaL*At33L - 
      3*(gt13L*PDstandardNth3beta1 + gt23L*PDstandardNth3beta2) + 
      gt33L*(PDstandardNth1beta1 + PDstandardNth2beta2 - 
      2*PDstandardNth3beta3));
    
    CCTK_REAL dotXt1 = 
      0.333333333333333333333333333333*(7*(gtu12*PDstandardNth12beta1 + 
      gtu13*PDstandardNth13beta1) + gtu11*(4*PDstandardNth11beta1 + 
      PDstandardNth12beta2 + PDstandardNth13beta3) + 
      6*gtu23*PDstandardNth23beta1 + gtu12*(PDstandardNth22beta2 + 
      PDstandardNth23beta3) + 3*(gtu22*PDstandardNth22beta1 + 
      gtu33*PDstandardNth33beta1) + gtu13*(PDstandardNth23beta2 + 
      PDstandardNth33beta3) - 6*(Atu11*PDstandardNth1alpha + 
      Atu12*PDstandardNth2alpha + Atu13*PDstandardNth3alpha) + 
      alphaL*(36*(Atu11*cdphi1 + Atu12*cdphi2 + Atu13*cdphi3) + 
      12*(Atu12*Gt112 + Atu13*Gt113 + Atu23*Gt123) + 6*(Atu11*Gt111 + 
      Atu22*Gt122 + Atu33*Gt133) - 4*(gtu11*PDstandardNth1trK + 
      gtu12*PDstandardNth2trK + gtu13*PDstandardNth3trK)) + 
      (-PDstandardNth1beta1 + 2*(PDstandardNth2beta2 + 
      PDstandardNth3beta3))*Xtn1 - 3*(PDstandardNth2beta1*Xtn2 + 
      PDstandardNth3beta1*Xtn3));
    
    CCTK_REAL dotXt2 = 
      0.333333333333333333333333333333*(6*gtu13*PDstandardNth13beta2 + 
      gtu12*(PDstandardNth11beta1 + 7*PDstandardNth12beta2 + 
      PDstandardNth13beta3) + gtu22*(PDstandardNth12beta1 + 
      4*PDstandardNth22beta2 + PDstandardNth23beta3) + 
      3*(gtu11*PDstandardNth11beta2 + gtu33*PDstandardNth33beta2) + 
      gtu23*(PDstandardNth13beta1 + 7*PDstandardNth23beta2 + 
      PDstandardNth33beta3) - 6*(Atu12*PDstandardNth1alpha + 
      Atu22*PDstandardNth2alpha + Atu23*PDstandardNth3alpha) + 
      alphaL*(36*(Atu12*cdphi1 + Atu22*cdphi2 + Atu23*cdphi3) + 
      12*(Atu12*Gt212 + Atu13*Gt213 + Atu23*Gt223) + 6*(Atu11*Gt211 + 
      Atu22*Gt222 + Atu33*Gt233) - 4*(gtu12*PDstandardNth1trK + 
      gtu22*PDstandardNth2trK + gtu23*PDstandardNth3trK)) + 
      (-PDstandardNth2beta2 + 2*(PDstandardNth1beta1 + 
      PDstandardNth3beta3))*Xtn2 - 3*(PDstandardNth1beta2*Xtn1 + 
      PDstandardNth3beta2*Xtn3));
    
    CCTK_REAL dotXt3 = 
      0.333333333333333333333333333333*(6*gtu12*PDstandardNth12beta3 + 
      gtu13*(PDstandardNth11beta1 + PDstandardNth12beta2 + 
      7*PDstandardNth13beta3) + 3*(gtu11*PDstandardNth11beta3 + 
      gtu22*PDstandardNth22beta3) + gtu23*(PDstandardNth12beta1 + 
      PDstandardNth22beta2 + 7*PDstandardNth23beta3) + 
      gtu33*(PDstandardNth13beta1 + PDstandardNth23beta2 + 
      4*PDstandardNth33beta3) - 6*(Atu13*PDstandardNth1alpha + 
      Atu23*PDstandardNth2alpha + Atu33*PDstandardNth3alpha) + 
      alphaL*(36*(Atu13*cdphi1 + Atu23*cdphi2 + Atu33*cdphi3) + 
      12*(Atu12*Gt312 + Atu13*Gt313 + Atu23*Gt323) + 6*(Atu11*Gt311 + 
      Atu22*Gt322 + Atu33*Gt333) - 4*(gtu13*PDstandardNth1trK + 
      gtu23*PDstandardNth2trK + gtu33*PDstandardNth3trK)) - 
      3*(PDstandardNth1beta3*Xtn1 + PDstandardNth2beta3*Xtn2) + 
      (2*(PDstandardNth1beta1 + PDstandardNth2beta2) - 
      PDstandardNth3beta3)*Xtn3);
    
    CCTK_REAL Xt1rhsL = dotXt1;
    
    CCTK_REAL Xt2rhsL = dotXt2;
    
    CCTK_REAL Xt3rhsL = dotXt3;
    
    CCTK_REAL dottrK = -(em4phi*(gtu11*PDstandardNth11alpha + 
      gtu22*PDstandardNth22alpha + gtu33*(PDstandardNth33alpha + 
      2*cdphi3*PDstandardNth3alpha) + 2*(gtu12*PDstandardNth12alpha + 
      gtu13*(PDstandardNth13alpha + cdphi1*PDstandardNth3alpha) + 
      gtu23*(PDstandardNth23alpha + cdphi2*PDstandardNth3alpha)) + 
      PDstandardNth1alpha*(2*(cdphi1*gtu11 + cdphi2*gtu12 + cdphi3*gtu13) - 
      Xtn1) + PDstandardNth2alpha*(2*(cdphi1*gtu12 + cdphi2*gtu22 + 
      cdphi3*gtu23) - Xtn2) - PDstandardNth3alpha*Xtn3)) + 
      alphaL*(2*(Atm12*Atm21 + Atm13*Atm31 + Atm23*Atm32) + 
      0.333333333333333333333333333333*SQR(trKL) + SQR(Atm11) + SQR(Atm22) 
      + SQR(Atm33));
    
    CCTK_REAL trKrhsL = dottrK;
    
    CCTK_REAL alpharhsL = -(harmonicF*((trKL + (-1 + 
      alphaL)*AlphaDriver)*(1 - LapseACoeff) + 
      AL*LapseACoeff)*pow(alphaL,(CCTK_REAL) harmonicN));
    
    CCTK_REAL ArhsL = (-(AL*AlphaDriver) + dottrK)*LapseACoeff;
    
    CCTK_REAL eta = 1;
    
    CCTK_REAL theta = 1;
    
    CCTK_REAL beta1rhsL;
    CCTK_REAL beta2rhsL;
    CCTK_REAL beta3rhsL;
    
    if (harmonicShift)
    {
      beta1rhsL = 0.5*alphaL*phiL*(alphaL*(gtu11*(2*(PDstandardNth1phi 
        + phiL*gtu23*PDstandardNth2gt13) + phiL*(gtu12*PDstandardNth2gt11 + 
        gtu13*PDstandardNth3gt11)) + 2*(gtu12*(PDstandardNth2phi + 
        phiL*gtu23*PDstandardNth3gt22) + gtu13*PDstandardNth3phi) + 
        phiL*(gtu33*(-(gtu12*PDstandardNth2gt33) + gtu13*PDstandardNth3gt33) 
        + 2*(gtu13*gtu22*PDstandardNth2gt23 + gtu11*gtu33*PDstandardNth3gt13 + 
        PDstandardNth1gt22*SQR(gtu12)))) + 
        phiL*(-2*(gtu12*PDstandardNth2alpha + gtu13*PDstandardNth3alpha) + 
        gtu11*(-2*(PDstandardNth1alpha + alphaL*gtu23*PDstandardNth1gt23) + 
        alphaL*(-(gtu22*PDstandardNth1gt22) + 2*(gtu12*PDstandardNth1gt12 + 
        gtu13*PDstandardNth1gt13 + gtu22*PDstandardNth2gt12 + 
        gtu23*PDstandardNth3gt12))) + 
        alphaL*(gtu12*(4*gtu13*PDstandardNth1gt23 + gtu22*PDstandardNth2gt22) 
        + gtu13*(2*gtu23*PDstandardNth2gt33 - gtu22*PDstandardNth3gt22) + 
        gtu33*(-(gtu11*PDstandardNth1gt33) + 2*gtu12*PDstandardNth3gt23) + 
        PDstandardNth1gt11*SQR(gtu11) + 2*PDstandardNth1gt33*SQR(gtu13))));
      
      beta2rhsL = 0.5*alphaL*phiL*(alphaL*(2*(gtu12*PDstandardNth1phi 
        + gtu22*(PDstandardNth2phi + phiL*(gtu23*PDstandardNth2gt23 + 
        gtu13*PDstandardNth3gt12)) + gtu23*PDstandardNth3phi) + 
        phiL*(2*gtu12*gtu13*PDstandardNth3gt11 + 
        gtu22*(-(gtu11*PDstandardNth2gt11) - 2*gtu13*PDstandardNth2gt13 + 
        gtu23*PDstandardNth3gt22) + gtu23*gtu33*PDstandardNth3gt33 + 
        PDstandardNth2gt22*SQR(gtu22))) + phiL*(gtu12*(-2*PDstandardNth1alpha 
        + alphaL*(gtu11*PDstandardNth1gt11 + gtu22*PDstandardNth1gt22 - 
        gtu33*PDstandardNth1gt33 + 4*gtu23*PDstandardNth2gt13)) + 
        gtu23*(-2*PDstandardNth3alpha - alphaL*gtu11*PDstandardNth3gt11) + 
        gtu22*(-2*PDstandardNth2alpha + alphaL*gtu33*(-PDstandardNth2gt33 + 
        2*PDstandardNth3gt23)) + 2*alphaL*(gtu11*(gtu22*PDstandardNth1gt12 + 
        gtu23*PDstandardNth1gt13) + gtu13*(gtu22*PDstandardNth1gt23 + 
        gtu23*PDstandardNth1gt33) + gtu12*(gtu22*PDstandardNth2gt12 + 
        gtu33*PDstandardNth3gt13) + PDstandardNth2gt11*SQR(gtu12) + 
        PDstandardNth2gt33*SQR(gtu23))));
      
      beta3rhsL = 0.5*alphaL*phiL*(2*alphaL*(gtu23*PDstandardNth2phi + 
        gtu13*(PDstandardNth1phi + phiL*(gtu12*PDstandardNth2gt11 + 
        gtu22*PDstandardNth2gt12 + gtu33*PDstandardNth3gt13)) + 
        gtu33*PDstandardNth3phi + phiL*(gtu33*(gtu22*PDstandardNth2gt23 + 
        gtu23*PDstandardNth3gt23) + PDstandardNth3gt22*SQR(gtu23))) + 
        phiL*(gtu23*(-2*PDstandardNth2alpha + 
        alphaL*(-(gtu11*PDstandardNth2gt11) + gtu22*PDstandardNth2gt22 + 
        gtu33*PDstandardNth2gt33)) + gtu13*(-2*PDstandardNth1alpha + 
        alphaL*(gtu11*PDstandardNth1gt11 - gtu22*PDstandardNth1gt22 + 
        gtu33*PDstandardNth1gt33 + 4*gtu23*PDstandardNth3gt12)) + 
        gtu33*(-2*(PDstandardNth3alpha + alphaL*gtu12*PDstandardNth3gt12) + 
        alphaL*(-(gtu11*PDstandardNth3gt11) - gtu22*PDstandardNth3gt22)) + 
        alphaL*(2*(gtu11*(gtu23*PDstandardNth1gt12 + 
        gtu33*PDstandardNth1gt13) + gtu12*(gtu23*PDstandardNth1gt22 + 
        gtu33*(PDstandardNth1gt23 + PDstandardNth2gt13)) + 
        PDstandardNth3gt11*SQR(gtu13)) + PDstandardNth3gt33*SQR(gtu33))));
    }
    else
    {
      beta1rhsL = (Xt1L + beta1L*BetaDriver*eta*(-1 + ShiftBCoeff) + 
        (B1L - Xt1L)*ShiftBCoeff)*ShiftGammaCoeff*theta;
      
      beta2rhsL = (Xt2L + beta2L*BetaDriver*eta*(-1 + ShiftBCoeff) + 
        (B2L - Xt2L)*ShiftBCoeff)*ShiftGammaCoeff*theta;
      
      beta3rhsL = (Xt3L + beta3L*BetaDriver*eta*(-1 + ShiftBCoeff) + 
        (B3L - Xt3L)*ShiftBCoeff)*ShiftGammaCoeff*theta;
    }
    
    CCTK_REAL B1rhsL = (dotXt1 - B1L*BetaDriver*eta)*ShiftBCoeff;
    
    CCTK_REAL B2rhsL = (dotXt2 - B2L*BetaDriver*eta)*ShiftBCoeff;
    
    CCTK_REAL B3rhsL = (dotXt3 - B3L*BetaDriver*eta)*ShiftBCoeff;
    
    /* Copy local copies back to grid functions */
    I3D(alpharhs,0,0,0) = alpharhsL;
    I3D(Arhs,0,0,0) = ArhsL;
    I3D(B1rhs,0,0,0) = B1rhsL;
    I3D(B2rhs,0,0,0) = B2rhsL;
    I3D(B3rhs,0,0,0) = B3rhsL;
    I3D(beta1rhs,0,0,0) = beta1rhsL;
    I3D(beta2rhs,0,0,0) = beta2rhsL;
    I3D(beta3rhs,0,0,0) = beta3rhsL;
    I3D(gt11rhs,0,0,0) = gt11rhsL;
    I3D(gt12rhs,0,0,0) = gt12rhsL;
    I3D(gt13rhs,0,0,0) = gt13rhsL;
    I3D(gt22rhs,0,0,0) = gt22rhsL;
    I3D(gt23rhs,0,0,0) = gt23rhsL;
    I3D(gt33rhs,0,0,0) = gt33rhsL;
    I3D(phirhs,0,0,0) = phirhsL;
    I3D(trKrhs,0,0,0) = trKrhsL;
    I3D(Xt1rhs,0,0,0) = Xt1rhsL;
    I3D(Xt2rhs,0,0,0) = Xt2rhsL;
    I3D(Xt3rhs,0,0,0) = Xt3rhsL;
    
  CAKERNEL_ML_BSSN_RHS1_Computations_End
  
CAKERNEL_ML_BSSN_RHS1_End
