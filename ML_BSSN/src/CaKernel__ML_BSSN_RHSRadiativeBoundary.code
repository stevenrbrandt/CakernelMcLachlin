#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define QAD(x) (SQR(SQR(x)))
#define INV(x) ((1.0) / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * (x) * (x))

CAKERNEL_ML_BSSN_RHSRadiativeBoundary_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  CCTK_REAL const dx = params.cagh_dx;
  CCTK_REAL const dy = params.cagh_dy;
  CCTK_REAL const dz = params.cagh_dz;
  CCTK_REAL const dt = params.cagh_dt;
  CCTK_REAL const t = params.cagh_time;
  CCTK_REAL const dxi = INV(dx);
  CCTK_REAL const dyi = INV(dy);
  CCTK_REAL const dzi = INV(dz);
  CCTK_REAL const khalf = 0.5;
  CCTK_REAL const kthird = 1/3.0;
  CCTK_REAL const ktwothird = 2.0/3.0;
  CCTK_REAL const kfourthird = 4.0/3.0;
  CCTK_REAL const keightthird = 8.0/3.0;
  CCTK_REAL const hdxi = 0.5 * dxi;
  CCTK_REAL const hdyi = 0.5 * dyi;
  CCTK_REAL const hdzi = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  CCTK_REAL const p1o16dx = 0.0625*INV(dx);
  CCTK_REAL const p1o16dy = 0.0625*INV(dy);
  CCTK_REAL const p1o16dz = 0.0625*INV(dz);
  CCTK_REAL const p1o2dx = 0.5*INV(dx);
  CCTK_REAL const p1o2dy = 0.5*INV(dy);
  CCTK_REAL const p1o2dz = 0.5*INV(dz);
  CCTK_REAL const p1o4dx = 0.25*INV(dx);
  CCTK_REAL const p1o4dxdy = 0.25*INV(dx)*INV(dy);
  CCTK_REAL const p1o4dxdz = 0.25*INV(dx)*INV(dz);
  CCTK_REAL const p1o4dy = 0.25*INV(dy);
  CCTK_REAL const p1o4dydz = 0.25*INV(dy)*INV(dz);
  CCTK_REAL const p1o4dz = 0.25*INV(dz);
  CCTK_REAL const p1odx2 = INV(SQR(dx));
  CCTK_REAL const p1ody2 = INV(SQR(dy));
  CCTK_REAL const p1odz2 = INV(SQR(dz));
  CCTK_REAL const pm1o2dx = -0.5*INV(dx);
  CCTK_REAL const pm1o2dy = -0.5*INV(dy);
  CCTK_REAL const pm1o2dz = -0.5*INV(dz);
  CCTK_REAL const pm1o4dx = -0.25*INV(dx);
  CCTK_REAL const pm1o4dy = -0.25*INV(dy);
  CCTK_REAL const pm1o4dz = -0.25*INV(dz);
  
  /* Assign local copies of arrays functions */
  
  
  
  /* Calculate temporaries and arrays functions */
  
  /* Copy local copies back to grid functions */
  
  /* Assign local copies of grid functions */
  
  CCTK_REAL AL = I3D(A,0,0,0);
  CCTK_REAL alphaL = I3D(alpha,0,0,0);
  CCTK_REAL At11L = I3D(At11,0,0,0);
  CCTK_REAL At12L = I3D(At12,0,0,0);
  CCTK_REAL At13L = I3D(At13,0,0,0);
  CCTK_REAL At22L = I3D(At22,0,0,0);
  CCTK_REAL At23L = I3D(At23,0,0,0);
  CCTK_REAL At33L = I3D(At33,0,0,0);
  CCTK_REAL B1L = I3D(B1,0,0,0);
  CCTK_REAL B2L = I3D(B2,0,0,0);
  CCTK_REAL B3L = I3D(B3,0,0,0);
  CCTK_REAL beta1L = I3D(beta1,0,0,0);
  CCTK_REAL beta2L = I3D(beta2,0,0,0);
  CCTK_REAL beta3L = I3D(beta3,0,0,0);
  CCTK_REAL gt11L = I3D(gt11,0,0,0);
  CCTK_REAL gt12L = I3D(gt12,0,0,0);
  CCTK_REAL gt13L = I3D(gt13,0,0,0);
  CCTK_REAL gt22L = I3D(gt22,0,0,0);
  CCTK_REAL gt23L = I3D(gt23,0,0,0);
  CCTK_REAL gt33L = I3D(gt33,0,0,0);
  CCTK_REAL phiL = I3D(phi,0,0,0);
  CCTK_REAL rCopyL = I3D(rCopy,0,0,0);
  CCTK_REAL trKL = I3D(trK,0,0,0);
  CCTK_REAL xCopyL = I3D(xCopy,0,0,0);
  CCTK_REAL yCopyL = I3D(yCopy,0,0,0);
  CCTK_REAL zCopyL = I3D(zCopy,0,0,0);
  
  
  /* Include user supplied include files */
  
  /* Precompute derivatives */
  
  /* Calculate temporaries and grid functions */
  ptrdiff_t dir1 = -Sign(bound_x);
  
  ptrdiff_t dir2 = -Sign(bound_y);
  
  ptrdiff_t dir3 = -Sign(bound_z);
  
  CCTK_REAL rn1 = -(xCopyL*INV(rCopyL));
  
  CCTK_REAL rn2 = -(yCopyL*INV(rCopyL));
  
  CCTK_REAL rn3 = -(zCopyL*INV(rCopyL));
  
  CCTK_REAL phi0 = IfThen(conformalMethod,1,0);
  
  CCTK_REAL phirhsL = (-phiL + phi0 + rCopyL*(PDonesided1(phi)*rn1 
    + PDonesided2(phi)*rn2 + PDonesided3(phi)*rn3))*INV(rCopyL);
  
  CCTK_REAL gt11rhsL = PDonesided1(gt11)*rn1 + PDonesided2(gt11)*rn2 
    + PDonesided3(gt11)*rn3 + (1 - gt11L)*INV(rCopyL);
  
  CCTK_REAL gt12rhsL = PDonesided1(gt12)*rn1 + PDonesided2(gt12)*rn2 
    + PDonesided3(gt12)*rn3 - gt12L*INV(rCopyL);
  
  CCTK_REAL gt13rhsL = PDonesided1(gt13)*rn1 + PDonesided2(gt13)*rn2 
    + PDonesided3(gt13)*rn3 - gt13L*INV(rCopyL);
  
  CCTK_REAL gt22rhsL = PDonesided1(gt22)*rn1 + PDonesided2(gt22)*rn2 
    + PDonesided3(gt22)*rn3 + (1 - gt22L)*INV(rCopyL);
  
  CCTK_REAL gt23rhsL = PDonesided1(gt23)*rn1 + PDonesided2(gt23)*rn2 
    + PDonesided3(gt23)*rn3 - gt23L*INV(rCopyL);
  
  CCTK_REAL gt33rhsL = PDonesided1(gt33)*rn1 + PDonesided2(gt33)*rn2 
    + PDonesided3(gt33)*rn3 + (1 - gt33L)*INV(rCopyL);
  
  CCTK_REAL trKrhsL = PDonesided1(trK)*rn1 + PDonesided2(trK)*rn2 + 
    PDonesided3(trK)*rn3 - trKL*INV(rCopyL);
  
  CCTK_REAL At11rhsL = PDonesided1(At11)*rn1 + PDonesided2(At11)*rn2 
    + PDonesided3(At11)*rn3 - At11L*INV(rCopyL);
  
  CCTK_REAL At12rhsL = PDonesided1(At12)*rn1 + PDonesided2(At12)*rn2 
    + PDonesided3(At12)*rn3 - At12L*INV(rCopyL);
  
  CCTK_REAL At13rhsL = PDonesided1(At13)*rn1 + PDonesided2(At13)*rn2 
    + PDonesided3(At13)*rn3 - At13L*INV(rCopyL);
  
  CCTK_REAL At22rhsL = PDonesided1(At22)*rn1 + PDonesided2(At22)*rn2 
    + PDonesided3(At22)*rn3 - At22L*INV(rCopyL);
  
  CCTK_REAL At23rhsL = PDonesided1(At23)*rn1 + PDonesided2(At23)*rn2 
    + PDonesided3(At23)*rn3 - At23L*INV(rCopyL);
  
  CCTK_REAL At33rhsL = PDonesided1(At33)*rn1 + PDonesided2(At33)*rn2 
    + PDonesided3(At33)*rn3 - At33L*INV(rCopyL);
  
  CCTK_REAL Xt1rhsL = 0;
  
  CCTK_REAL Xt2rhsL = 0;
  
  CCTK_REAL Xt3rhsL = 0;
  
  CCTK_REAL alpharhsL = PDonesided1(alpha)*rn1 + 
    PDonesided2(alpha)*rn2 + PDonesided3(alpha)*rn3 + (1 - 
    alphaL)*INV(rCopyL);
  
  CCTK_REAL ArhsL = PDonesided1(A)*rn1 + PDonesided2(A)*rn2 + 
    PDonesided3(A)*rn3 - AL*INV(rCopyL);
  
  CCTK_REAL beta1rhsL = PDonesided1(beta1)*rn1 + 
    PDonesided2(beta1)*rn2 + PDonesided3(beta1)*rn3 - 
    beta1L*INV(rCopyL);
  
  CCTK_REAL beta2rhsL = PDonesided1(beta2)*rn1 + 
    PDonesided2(beta2)*rn2 + PDonesided3(beta2)*rn3 - 
    beta2L*INV(rCopyL);
  
  CCTK_REAL beta3rhsL = PDonesided1(beta3)*rn1 + 
    PDonesided2(beta3)*rn2 + PDonesided3(beta3)*rn3 - 
    beta3L*INV(rCopyL);
  
  CCTK_REAL B1rhsL = PDonesided1(B1)*rn1 + PDonesided2(B1)*rn2 + 
    PDonesided3(B1)*rn3 - B1L*INV(rCopyL);
  
  CCTK_REAL B2rhsL = PDonesided1(B2)*rn1 + PDonesided2(B2)*rn2 + 
    PDonesided3(B2)*rn3 - B2L*INV(rCopyL);
  
  CCTK_REAL B3rhsL = PDonesided1(B3)*rn1 + PDonesided2(B3)*rn2 + 
    PDonesided3(B3)*rn3 - B3L*INV(rCopyL);
  
  /* Copy local copies back to grid functions */
  I3D(alpharhs,0,0,0) = alpharhsL;
  I3D(Arhs,0,0,0) = ArhsL;
  I3D(At11rhs,0,0,0) = At11rhsL;
  I3D(At12rhs,0,0,0) = At12rhsL;
  I3D(At13rhs,0,0,0) = At13rhsL;
  I3D(At22rhs,0,0,0) = At22rhsL;
  I3D(At23rhs,0,0,0) = At23rhsL;
  I3D(At33rhs,0,0,0) = At33rhsL;
  I3D(B1rhs,0,0,0) = B1rhsL;
  I3D(B2rhs,0,0,0) = B2rhsL;
  I3D(B3rhs,0,0,0) = B3rhsL;
  I3D(beta1rhs,0,0,0) = beta1rhsL;
  I3D(beta2rhs,0,0,0) = beta2rhsL;
  I3D(beta3rhs,0,0,0) = beta3rhsL;
  I3D(gt11rhs,0,0,0) = gt11rhsL;
  I3D(gt12rhs,0,0,0) = gt12rhsL;
  I3D(gt13rhs,0,0,0) = gt13rhsL;
  I3D(gt22rhs,0,0,0) = gt22rhsL;
  I3D(gt23rhs,0,0,0) = gt23rhsL;
  I3D(gt33rhs,0,0,0) = gt33rhsL;
  I3D(phirhs,0,0,0) = phirhsL;
  I3D(trKrhs,0,0,0) = trKrhsL;
  I3D(Xt1rhs,0,0,0) = Xt1rhsL;
  I3D(Xt2rhs,0,0,0) = Xt2rhsL;
  I3D(Xt3rhs,0,0,0) = Xt3rhsL;
  
CAKERNEL_ML_BSSN_RHSRadiativeBoundary_End
