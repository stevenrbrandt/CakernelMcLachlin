#undef KRANC_DIFF_FUNCTIONS
#define KRANC_C
#include "Differencing.h"
#include "GenericFD.h"

#undef KRANC_GFOFFSET3D
#define KRANC_GFOFFSET3D(u,i,j,k) I3D(u,i,j,k)


/* Define macros used in calculations */
#define INITVALUE (42)
#define INV(x) ((CCTK_REAL)1.0 / (x))
#define SQR(x) ((x) * (x))
#define CUB(x) ((x) * SQR(x))
#define QAD(x) (SQR(SQR(x)))

CAKERNEL_DEVICE_ML_BSSN_InitRHS_Begin
  
  /* Include user-supplied include files */
  
  /* Initialise finite differencing variables */
  CCTK_REAL const dx = params.cagh_dx;
  CCTK_REAL const dy = params.cagh_dy;
  CCTK_REAL const dz = params.cagh_dz;
  CCTK_REAL const dt = params.cagh_dt;
  CCTK_REAL const t = params.cagh_time;
  CCTK_REAL const dxi = INV(dx);
  CCTK_REAL const dyi = INV(dy);
  CCTK_REAL const dzi = INV(dz);
  CCTK_REAL const khalf = 0.5;
  CCTK_REAL const kthird = 1/3.0;
  CCTK_REAL const ktwothird = 2.0/3.0;
  CCTK_REAL const kfourthird = 4.0/3.0;
  CCTK_REAL const keightthird = 8.0/3.0;
  CCTK_REAL const hdxi = 0.5 * dxi;
  CCTK_REAL const hdyi = 0.5 * dyi;
  CCTK_REAL const hdzi = 0.5 * dzi;
  
  /* Initialize predefined quantities */
  CCTK_REAL const p1o1024dx = 0.0009765625*INV(dx);
  CCTK_REAL const p1o1024dy = 0.0009765625*INV(dy);
  CCTK_REAL const p1o1024dz = 0.0009765625*INV(dz);
  CCTK_REAL const p1o1680dx = 0.000595238095238095238095238095238*INV(dx);
  CCTK_REAL const p1o1680dy = 0.000595238095238095238095238095238*INV(dy);
  CCTK_REAL const p1o1680dz = 0.000595238095238095238095238095238*INV(dz);
  CCTK_REAL const p1o2dx = 0.5*INV(dx);
  CCTK_REAL const p1o2dy = 0.5*INV(dy);
  CCTK_REAL const p1o2dz = 0.5*INV(dz);
  CCTK_REAL const p1o5040dx2 = 0.000198412698412698412698412698413*INV(SQR(dx));
  CCTK_REAL const p1o5040dy2 = 0.000198412698412698412698412698413*INV(SQR(dy));
  CCTK_REAL const p1o5040dz2 = 0.000198412698412698412698412698413*INV(SQR(dz));
  CCTK_REAL const p1o560dx = 0.00178571428571428571428571428571*INV(dx);
  CCTK_REAL const p1o560dy = 0.00178571428571428571428571428571*INV(dy);
  CCTK_REAL const p1o560dz = 0.00178571428571428571428571428571*INV(dz);
  CCTK_REAL const p1o705600dxdy = 1.41723356009070294784580498866e-6*INV(dx*dy);
  CCTK_REAL const p1o705600dxdz = 1.41723356009070294784580498866e-6*INV(dx*dz);
  CCTK_REAL const p1o705600dydz = 1.41723356009070294784580498866e-6*INV(dy*dz);
  CCTK_REAL const p1o840dx = 0.00119047619047619047619047619048*INV(dx);
  CCTK_REAL const p1o840dy = 0.00119047619047619047619047619048*INV(dy);
  CCTK_REAL const p1o840dz = 0.00119047619047619047619047619048*INV(dz);
  CCTK_REAL const p1odx = INV(dx);
  CCTK_REAL const p1ody = INV(dy);
  CCTK_REAL const p1odz = INV(dz);
  CCTK_REAL const pm1o2dx = -0.5*INV(dx);
  CCTK_REAL const pm1o2dy = -0.5*INV(dy);
  CCTK_REAL const pm1o2dz = -0.5*INV(dz);
  CCTK_REAL const pm1o840dx = -0.00119047619047619047619047619048*INV(dx);
  CCTK_REAL const pm1o840dy = -0.00119047619047619047619047619048*INV(dy);
  CCTK_REAL const pm1o840dz = -0.00119047619047619047619047619048*INV(dz);
  
  /* Assign local copies of arrays functions */
  
  
  
  /* Calculate temporaries and arrays functions */
  
  /* Copy local copies back to grid functions */
  CAKERNEL_DEVICE_ML_BSSN_InitRHS_Computations_Begin
    
    /* Assign local copies of grid functions */
    
    
    
    /* Include user supplied include files */
    
    /* Precompute derivatives */
    
    /* Calculate temporaries and grid functions */
    CCTK_REAL phirhsL = 0;
    
    CCTK_REAL gt11rhsL = 0;
    
    CCTK_REAL gt12rhsL = 0;
    
    CCTK_REAL gt13rhsL = 0;
    
    CCTK_REAL gt22rhsL = 0;
    
    CCTK_REAL gt23rhsL = 0;
    
    CCTK_REAL gt33rhsL = 0;
    
    CCTK_REAL trKrhsL = 0;
    
    CCTK_REAL At11rhsL = 0;
    
    CCTK_REAL At12rhsL = 0;
    
    CCTK_REAL At13rhsL = 0;
    
    CCTK_REAL At22rhsL = 0;
    
    CCTK_REAL At23rhsL = 0;
    
    CCTK_REAL At33rhsL = 0;
    
    CCTK_REAL Xt1rhsL = 0;
    
    CCTK_REAL Xt2rhsL = 0;
    
    CCTK_REAL Xt3rhsL = 0;
    
    CCTK_REAL alpharhsL = 0;
    
    CCTK_REAL ArhsL = 0;
    
    CCTK_REAL beta1rhsL = 0;
    
    CCTK_REAL beta2rhsL = 0;
    
    CCTK_REAL beta3rhsL = 0;
    
    CCTK_REAL B1rhsL = 0;
    
    CCTK_REAL B2rhsL = 0;
    
    CCTK_REAL B3rhsL = 0;
    
    /* Copy local copies back to grid functions */
    I3D(alpharhs,0,0,0) = alpharhsL;
    I3D(Arhs,0,0,0) = ArhsL;
    I3D(At11rhs,0,0,0) = At11rhsL;
    I3D(At12rhs,0,0,0) = At12rhsL;
    I3D(At13rhs,0,0,0) = At13rhsL;
    I3D(At22rhs,0,0,0) = At22rhsL;
    I3D(At23rhs,0,0,0) = At23rhsL;
    I3D(At33rhs,0,0,0) = At33rhsL;
    I3D(B1rhs,0,0,0) = B1rhsL;
    I3D(B2rhs,0,0,0) = B2rhsL;
    I3D(B3rhs,0,0,0) = B3rhsL;
    I3D(beta1rhs,0,0,0) = beta1rhsL;
    I3D(beta2rhs,0,0,0) = beta2rhsL;
    I3D(beta3rhs,0,0,0) = beta3rhsL;
    I3D(gt11rhs,0,0,0) = gt11rhsL;
    I3D(gt12rhs,0,0,0) = gt12rhsL;
    I3D(gt13rhs,0,0,0) = gt13rhsL;
    I3D(gt22rhs,0,0,0) = gt22rhsL;
    I3D(gt23rhs,0,0,0) = gt23rhsL;
    I3D(gt33rhs,0,0,0) = gt33rhsL;
    I3D(phirhs,0,0,0) = phirhsL;
    I3D(trKrhs,0,0,0) = trKrhsL;
    I3D(Xt1rhs,0,0,0) = Xt1rhsL;
    I3D(Xt2rhs,0,0,0) = Xt2rhsL;
    I3D(Xt3rhs,0,0,0) = Xt3rhsL;
    
  CAKERNEL_DEVICE_ML_BSSN_InitRHS_Computations_End
  
CAKERNEL_DEVICE_ML_BSSN_InitRHS_End
