# File produced by Kranc


shares: ADMBase


EXTENDS CCTK_KEYWORD evolution_method "evolution_method"
{
  ML_BSSN :: ""
} 


EXTENDS CCTK_KEYWORD lapse_evolution_method "lapse_evolution_method"
{
  ML_BSSN :: ""
} 


EXTENDS CCTK_KEYWORD shift_evolution_method "shift_evolution_method"
{
  ML_BSSN :: ""
} 


EXTENDS CCTK_KEYWORD dtshift_evolution_method "dtshift_evolution_method"
{
  ML_BSSN :: ""
} 



shares: GenericFD

USES CCTK_INT stencil_width
USES CCTK_INT stencil_width_x
USES CCTK_INT stencil_width_y
USES CCTK_INT stencil_width_z
USES CCTK_INT boundary_width


shares: MethodOfLines

USES CCTK_INT MoL_Num_Evolved_Vars

restricted:
CCTK_INT verbose "verbose"
{
  *:* :: ""
} 0

restricted:
CCTK_REAL harmonicF "d/dt alpha = - f alpha^n K   (harmonic=1, 1+log=2)"
{
  "*:*" :: ""
} 1

restricted:
CCTK_REAL AlphaDriver "AlphaDriver"
{
  "*:*" :: ""
} 0

restricted:
CCTK_REAL ShiftGammaCoeff "ShiftGammaCoeff"
{
  "*:*" :: ""
} 0

restricted:
CCTK_REAL BetaDriver "BetaDriver"
{
  "*:*" :: ""
} 0

restricted:
CCTK_REAL LapseAdvectionCoeff "Factor in front of the shift advection terms in 1+log"
{
  "*:*" :: ""
} 1

restricted:
CCTK_REAL ShiftAdvectionCoeff "Factor in front of the shift advection terms in gamma driver"
{
  "*:*" :: ""
} 1

restricted:
CCTK_REAL MinimumLapse "Minimum value of the lapse function"
{
  "*:*" :: ""
} -1

restricted:
CCTK_INT harmonicN "d/dt alpha = - f alpha^n K  (harmonic=2, 1+log=1)"
{
  *:* :: ""
} 2

restricted:
CCTK_INT ShiftAlphaPower "ShiftAlphaPower"
{
  *:* :: ""
} 0

restricted:
CCTK_INT conformalmethod "0 for phi method, 1 for W method"
{
  *:* :: ""
} 0

private:
KEYWORD my_initial_data "my_initial_data"
{
  "ADMBase" :: "ADMBase"
  "Minkowski" :: "Minkowski"
} "ADMBase"

restricted:
KEYWORD my_initial_boundary_condition "my_initial_boundary_condition"
{
  "none" :: "none"
} "none"

restricted:
KEYWORD my_rhs_boundary_condition "my_rhs_boundary_condition"
{
  "none" :: "none"
  "static" :: "static"
  "radiative" :: "radiative"
} "none"

private:
KEYWORD my_boundary_condition "my_boundary_condition"
{
  "none" :: "none"
  "Minkowski" :: "Minkowski"
} "none"

restricted:
KEYWORD calculate_ADMBase_variables_at "calculate_ADMBase_variables_at"
{
  "MoL_PostStep" :: "MoL_PostStep"
  "CCTK_EVOL" :: "CCTK_EVOL"
  "CCTK_ANALYSIS" :: "CCTK_ANALYSIS"
} "MoL_PostStep"

restricted:
CCTK_INT ML_BSSN_MaxNumEvolvedVars "Number of evolved variables used by this thorn" ACCUMULATOR-BASE=MethodofLines::MoL_Num_Evolved_Vars
{
  25:25 :: "Number of evolved variables used by this thorn"
} 25

restricted:
CCTK_INT timelevels "Number of active timelevels"
{
  0:3 :: ""
} 3

restricted:
CCTK_INT rhs_timelevels "Number of active RHS timelevels"
{
  0:3 :: ""
} 1

restricted:
CCTK_INT ML_BSSN_Minkowski_calc_every "ML_BSSN_Minkowski_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_convertFromADMBase_calc_every "ML_BSSN_convertFromADMBase_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_convertFromADMBaseGamma_calc_every "ML_BSSN_convertFromADMBaseGamma_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_RHS_calc_every "ML_BSSN_RHS_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_RHSStaticBoundary_calc_every "ML_BSSN_RHSStaticBoundary_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_RHSRadiativeBoundary_calc_every "ML_BSSN_RHSRadiativeBoundary_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_enforce_calc_every "ML_BSSN_enforce_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_boundary_calc_every "ML_BSSN_boundary_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_convertToADMBase_calc_every "ML_BSSN_convertToADMBase_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_ADMBaseBoundary_calc_every "ML_BSSN_ADMBaseBoundary_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_constraints_calc_every "ML_BSSN_constraints_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_constraints_boundary_calc_every "ML_BSSN_constraints_boundary_calc_every"
{
  *:* :: ""
} 1

restricted:
CCTK_INT ML_BSSN_Minkowski_calc_offset "ML_BSSN_Minkowski_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_convertFromADMBase_calc_offset "ML_BSSN_convertFromADMBase_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_convertFromADMBaseGamma_calc_offset "ML_BSSN_convertFromADMBaseGamma_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_RHS_calc_offset "ML_BSSN_RHS_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_RHSStaticBoundary_calc_offset "ML_BSSN_RHSStaticBoundary_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_RHSRadiativeBoundary_calc_offset "ML_BSSN_RHSRadiativeBoundary_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_enforce_calc_offset "ML_BSSN_enforce_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_boundary_calc_offset "ML_BSSN_boundary_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_convertToADMBase_calc_offset "ML_BSSN_convertToADMBase_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_ADMBaseBoundary_calc_offset "ML_BSSN_ADMBaseBoundary_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_constraints_calc_offset "ML_BSSN_constraints_calc_offset"
{
  *:* :: ""
} 0

restricted:
CCTK_INT ML_BSSN_constraints_boundary_calc_offset "ML_BSSN_constraints_boundary_calc_offset"
{
  *:* :: ""
} 0

private:
KEYWORD At11_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD At12_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD At13_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD At22_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD At23_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD At33_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD A_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD B1_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD B2_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD B3_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD Xt1_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD Xt2_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD Xt3_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD alpha_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD phi_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD gt11_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD gt12_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD gt13_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD gt22_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD gt23_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD gt33_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD beta1_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD beta2_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD beta3_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD trK_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ML_curv_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ML_dtlapse_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ML_dtshift_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ML_Gamma_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ML_lapse_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ML_log_confac_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ML_metric_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ML_shift_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
KEYWORD ML_trace_curv_bound "Boundary condition to implement"
{
  "flat" :: "Flat boundary condition"
  "none" :: "No boundary condition"
  "static" :: "Boundaries held fixed"
  "radiative" :: "Radiation boundary condition"
  "scalar" :: "Dirichlet boundary condition"
  "newrad" :: "Improved radiative boundary condition"
  "skip" :: "skip boundary condition code"
} "skip"

private:
CCTK_REAL At11_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL At12_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL At13_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL At22_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL At23_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL At33_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL A_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL B1_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL B2_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL B3_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL Xt1_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL Xt2_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL Xt3_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL alpha_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL phi_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL gt11_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL gt12_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL gt13_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL gt22_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL gt23_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL gt33_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL beta1_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL beta2_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL beta3_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL trK_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ML_curv_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ML_dtlapse_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ML_dtshift_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ML_Gamma_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ML_lapse_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ML_log_confac_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ML_metric_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ML_shift_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL ML_trace_curv_bound_speed "characteristic speed at boundary"
{
  "0:*" :: "outgoing characteristic speed > 0"
} 1.

private:
CCTK_REAL At11_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL At12_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL At13_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL At22_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL At23_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL At33_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL A_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL B1_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL B2_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL B3_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL Xt1_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL Xt2_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL Xt3_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL alpha_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL phi_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL gt11_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL gt12_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL gt13_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL gt22_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL gt23_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL gt33_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL beta1_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL beta2_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL beta3_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL trK_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ML_curv_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ML_dtlapse_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ML_dtshift_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ML_Gamma_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ML_lapse_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ML_log_confac_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ML_metric_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ML_shift_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL ML_trace_curv_bound_limit "limit value for r -> infinity"
{
  "*:*" :: "value of limit value is unrestricted"
} 0.

private:
CCTK_REAL At11_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL At12_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL At13_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL At22_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL At23_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL At33_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL A_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL B1_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL B2_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL B3_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL Xt1_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL Xt2_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL Xt3_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL alpha_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL phi_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL gt11_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL gt12_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL gt13_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL gt22_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL gt23_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL gt33_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL beta1_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL beta2_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL beta3_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL trK_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ML_curv_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ML_dtlapse_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ML_dtshift_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ML_Gamma_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ML_lapse_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ML_log_confac_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ML_metric_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ML_shift_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

private:
CCTK_REAL ML_trace_curv_bound_scalar "Dirichlet boundary value"
{
  "*:*" :: "unrestricted"
} 0.

