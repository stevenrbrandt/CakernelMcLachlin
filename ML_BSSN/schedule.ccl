# File produced by user eschnett
# Produced with Mathematica Version 6.0 for Mac OS X x86 (32-bit) (April 20, 2007)

# Mathematica script written by Ian Hinder and Sascha Husa


STORAGE: cons_detg[1]

STORAGE: cons_Gamma[1]

STORAGE: cons_traceA[1]

STORAGE: Ham[1]

STORAGE: mom[1]

STORAGE: ML_curvrhs[1]

STORAGE: ML_dtlapserhs[1]

STORAGE: ML_dtshiftrhs[1]

STORAGE: ML_Gammarhs[1]

STORAGE: ML_lapserhs[1]

STORAGE: ML_log_confacrhs[1]

STORAGE: ML_metricrhs[1]

STORAGE: ML_shiftrhs[1]

STORAGE: ML_trace_curvrhs[1]

STORAGE: ML_curv[2]

STORAGE: ML_dtlapse[2]

STORAGE: ML_dtshift[2]

STORAGE: ML_Gamma[2]

STORAGE: ML_lapse[2]

STORAGE: ML_log_confac[2]

STORAGE: ML_metric[2]

STORAGE: ML_shift[2]

STORAGE: ML_trace_curv[2]

schedule ML_BSSN_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ML_BSSN_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule ML_BSSN_RegisterSymmetries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "register symmetries"


if (CCTK_EQUALS(my_initial_data, "Minkowski"))
{
  schedule ML_BSSN_Minkowski IN ADMBase_InitialData
  {
    LANG: C
    
  } "ML_BSSN_Minkowski"
}


if (CCTK_EQUALS(my_initial_data, "ADMBase"))
{
  schedule ML_BSSN_convertFromADMBase AT initial AFTER ADMBase_PostInitial
  {
    LANG: C
    
  } "ML_BSSN_convertFromADMBase"
}


if (CCTK_EQUALS(my_initial_data, "ADMBase"))
{
  schedule ML_BSSN_convertFromADMBaseGamma AT initial AFTER ML_BSSN_convertFromADMBase
  {
    LANG: C
    
    SYNC: ML_dtlapse
    SYNC: ML_dtshift
    SYNC: ML_Gamma
  } "ML_BSSN_convertFromADMBaseGamma"
}

schedule ML_BSSN_RHS IN MoL_CalcRHS
{
  LANG: C
  
} "ML_BSSN_RHS"

schedule ML_BSSN_RHS AT analysis
{
  LANG: C
  
  SYNC: ML_curvrhs
  SYNC: ML_dtlapserhs
  SYNC: ML_dtshiftrhs
  SYNC: ML_Gammarhs
  SYNC: ML_lapserhs
  SYNC: ML_log_confacrhs
  SYNC: ML_metricrhs
  SYNC: ML_shiftrhs
  SYNC: ML_trace_curvrhs
} "ML_BSSN_RHS"


if (CCTK_EQUALS(SpaceTime, "Space+Matter"))
{
  schedule ML_BSSN_matter IN MoL_CalcRHS AFTER ML_BSSN_RHS
  {
    LANG: C
    
  } "ML_BSSN_matter"
}


if (CCTK_EQUALS(SpaceTime, "Space+Matter"))
{
  schedule ML_BSSN_matter AT analysis AFTER ML_BSSN_RHS
  {
    LANG: C
    
    SYNC: ML_curvrhs
    SYNC: ML_Gammarhs
    SYNC: ML_trace_curvrhs
  } "ML_BSSN_matter"
}

schedule ML_BSSN_enforce IN MoL_PostStep BEFORE ML_BSSN_BoundConds
{
  LANG: C
  
} "ML_BSSN_enforce"

schedule ML_BSSN_convertToADMBase IN MoL_PostStep AFTER ML_BSSN_ApplyBCs AFTER ML_BSSN_enforce
{
  LANG: C
  
} "ML_BSSN_convertToADMBase"

schedule ML_BSSN_constraints AT analysis
{
  LANG: C
  
  SYNC: cons_detg
  SYNC: cons_Gamma
  SYNC: cons_traceA
  SYNC: Ham
  SYNC: mom
} "ML_BSSN_constraints"


if (CCTK_EQUALS(SpaceTime, "Space+Matter"))
{
  schedule ML_BSSN_matter_constraints AT analysis AFTER ML_BSSN_constraints
  {
    LANG: C
    
    SYNC: Ham
    SYNC: mom
  } "ML_BSSN_matter_constraints"
}

schedule ML_BSSN_ApplyBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: ML_curv
  SYNC: ML_dtlapse
  SYNC: ML_dtshift
  SYNC: ML_Gamma
  SYNC: ML_lapse
  SYNC: ML_log_confac
  SYNC: ML_metric
  SYNC: ML_shift
  SYNC: ML_trace_curv
} "apply boundary conditions"

schedule ML_BSSN_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule group ApplyBCs as ML_BSSN_ApplyBCs in MoL_PostStep  after ML_BSSN_ApplyBoundConds
{
  # no language specified
  
} "Apply boundary conditions controlled by thorn Boundary"
