# File produced by Kranc


if (other_timelevels == 1)
{
  STORAGE: ML_cons_detg[1]
}

if (other_timelevels == 1)
{
  STORAGE: ML_cons_Gamma[1]
}

if (other_timelevels == 1)
{
  STORAGE: ML_cons_traceA[1]
}

if (other_timelevels == 1)
{
  STORAGE: ML_Ham[1]
}

if (other_timelevels == 1)
{
  STORAGE: ML_mom[1]
}

if (timelevels == 1)
{
  STORAGE: ML_curv[1]
}

if (timelevels == 1)
{
  STORAGE: ML_dtlapse[1]
}

if (timelevels == 1)
{
  STORAGE: ML_dtshift[1]
}

if (timelevels == 1)
{
  STORAGE: ML_Gamma[1]
}

if (timelevels == 1)
{
  STORAGE: ML_lapse[1]
}

if (timelevels == 1)
{
  STORAGE: ML_log_confac[1]
}

if (timelevels == 1)
{
  STORAGE: ML_metric[1]
}

if (timelevels == 1)
{
  STORAGE: ML_shift[1]
}

if (timelevels == 1)
{
  STORAGE: ML_trace_curv[1]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_curvrhs[1]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_dtlapserhs[1]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_dtshiftrhs[1]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_Gammarhs[1]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_lapserhs[1]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_log_confacrhs[1]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_metricrhs[1]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_shiftrhs[1]
}

if (rhs_timelevels == 1)
{
  STORAGE: ML_trace_curvrhs[1]
}

schedule ML_BSSN_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ML_BSSN_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"


if (CCTK_EQUALS(my_initial_data, "Minkowski"))
{
  schedule ML_BSSN_Minkowski IN ADMBase_InitialData
  {
    LANG: C
    WRITES:   ML_BSSN::ML_curv
    WRITES:   ML_BSSN::ML_dtlapse
    WRITES:   ML_BSSN::ML_dtshift
    WRITES:   ML_BSSN::ML_Gamma
    WRITES:   ML_BSSN::ML_lapse
    WRITES:   ML_BSSN::ML_log_confac
    WRITES:   ML_BSSN::ML_metric
    WRITES:   ML_BSSN::ML_shift
    WRITES:   ML_BSSN::ML_trace_curv
  } "ML_BSSN_Minkowski"
}


if (CCTK_EQUALS(my_initial_data, "ADMBase"))
{
  schedule ML_BSSN_convertFromADMBase AT initial AFTER ADMBase_PostInitial
  {
    LANG: C
    READS:    ADMBase::curv
    READS:    ADMBase::lapse
    READS:    ADMBase::metric
    READS:    ADMBase::shift
    READS:    ML_BSSN::ML_log_confac
    READS:    ML_BSSN::ML_trace_curv
    WRITES:   ML_BSSN::ML_curv
    WRITES:   ML_BSSN::ML_lapse
    WRITES:   ML_BSSN::ML_log_confac
    WRITES:   ML_BSSN::ML_metric
    WRITES:   ML_BSSN::ML_shift
    WRITES:   ML_BSSN::ML_trace_curv
  } "ML_BSSN_convertFromADMBase"
}


if (CCTK_EQUALS(my_initial_data, "ADMBase"))
{
  schedule ML_BSSN_InitGamma AT initial BEFORE ML_BSSN_convertFromADMBaseGamma
  {
    LANG: C
    WRITES:   ML_BSSN::ML_dtlapse
    WRITES:   ML_BSSN::ML_dtshift
    WRITES:   ML_BSSN::ML_Gamma
  } "ML_BSSN_InitGamma"
}


if (CCTK_EQUALS(my_initial_data, "ADMBase"))
{
  schedule ML_BSSN_convertFromADMBaseGamma AT initial AFTER ML_BSSN_convertFromADMBase
  {
    LANG: C
    SYNC: ML_dtlapse
    SYNC: ML_dtshift
    SYNC: ML_Gamma
    READS:    ADMBase::dtlapse
    READS:    ADMBase::dtshift
    READS:    ML_BSSN::ML_lapse
    READS:    ML_BSSN::ML_metric
    READS:    ML_BSSN::ML_shift
    WRITES:   ML_BSSN::ML_dtlapse
    WRITES:   ML_BSSN::ML_dtshift
    WRITES:   ML_BSSN::ML_Gamma
  } "ML_BSSN_convertFromADMBaseGamma"
}

schedule CAKERNEL_Launch_ML_BSSN_RHS1 IN ML_BSSN_evolCalcGroup
{
  LANG: C
  # TAGS: Device=1
  READS:    ML_BSSN::ML_curv
  READS:    ML_BSSN::ML_dtlapse
  READS:    ML_BSSN::ML_dtshift
  READS:    ML_BSSN::ML_Gamma
  READS:    ML_BSSN::ML_lapse
  READS:    ML_BSSN::ML_log_confac
  READS:    ML_BSSN::ML_metric
  READS:    ML_BSSN::ML_shift
  READS:    ML_BSSN::ML_trace_curv
  WRITES:   ML_BSSN::ML_dtlapserhs
  WRITES:   ML_BSSN::ML_dtshiftrhs
  WRITES:   ML_BSSN::ML_Gammarhs
  WRITES:   ML_BSSN::ML_lapserhs
  WRITES:   ML_BSSN::ML_log_confacrhs
  WRITES:   ML_BSSN::ML_metricrhs
  WRITES:   ML_BSSN::ML_shiftrhs
  WRITES:   ML_BSSN::ML_trace_curvrhs
} "ML_BSSN_RHS1"

schedule CAKERNEL_Launch_ML_BSSN_RHS2 IN ML_BSSN_evolCalcGroup
{
  LANG: C
  # TAGS: Device=1
  READS:    ML_BSSN::ML_curv
  READS:    ML_BSSN::ML_Gamma
  READS:    ML_BSSN::ML_lapse
  READS:    ML_BSSN::ML_log_confac
  READS:    ML_BSSN::ML_metric
  READS:    ML_BSSN::ML_shift
  READS:    ML_BSSN::ML_trace_curv
  WRITES:   ML_BSSN::ML_curvrhs
} "ML_BSSN_RHS2"


if (CCTK_EQUALS(apply_dissipation, "always"))
{
  schedule CAKERNEL_Launch_ML_BSSN_Dissipation IN ML_BSSN_evolCalcGroup AFTER (ML_BSSN_RHS1 ML_BSSN_RHS2)
  {
    LANG: C
    # TAGS: Device=1
    READS:    ML_BSSN::ML_curv
    READS:    ML_BSSN::ML_curvrhs
    READS:    ML_BSSN::ML_dtlapse
    READS:    ML_BSSN::ML_dtlapserhs
    READS:    ML_BSSN::ML_dtshift
    READS:    ML_BSSN::ML_dtshiftrhs
    READS:    ML_BSSN::ML_Gamma
    READS:    ML_BSSN::ML_Gammarhs
    READS:    ML_BSSN::ML_lapse
    READS:    ML_BSSN::ML_lapserhs
    READS:    ML_BSSN::ML_log_confac
    READS:    ML_BSSN::ML_log_confacrhs
    READS:    ML_BSSN::ML_metric
    READS:    ML_BSSN::ML_metricrhs
    READS:    ML_BSSN::ML_shift
    READS:    ML_BSSN::ML_shiftrhs
    READS:    ML_BSSN::ML_trace_curv
    READS:    ML_BSSN::ML_trace_curvrhs
    WRITES:   ML_BSSN::ML_curvrhs
    WRITES:   ML_BSSN::ML_dtlapserhs
    WRITES:   ML_BSSN::ML_dtshiftrhs
    WRITES:   ML_BSSN::ML_Gammarhs
    WRITES:   ML_BSSN::ML_lapserhs
    WRITES:   ML_BSSN::ML_log_confacrhs
    WRITES:   ML_BSSN::ML_metricrhs
    WRITES:   ML_BSSN::ML_shiftrhs
    WRITES:   ML_BSSN::ML_trace_curvrhs
  } "ML_BSSN_Dissipation"
}

schedule CAKERNEL_Launch_ML_BSSN_Advect IN ML_BSSN_evolCalcGroup AFTER (ML_BSSN_RHS1 ML_BSSN_RHS2)
{
  LANG: C
  # TAGS: Device=1
  READS:    ML_BSSN::ML_curv
  READS:    ML_BSSN::ML_curvrhs
  READS:    ML_BSSN::ML_dtlapse
  READS:    ML_BSSN::ML_dtlapserhs
  READS:    ML_BSSN::ML_dtshift
  READS:    ML_BSSN::ML_dtshiftrhs
  READS:    ML_BSSN::ML_Gamma
  READS:    ML_BSSN::ML_Gammarhs
  READS:    ML_BSSN::ML_lapse
  READS:    ML_BSSN::ML_lapserhs
  READS:    ML_BSSN::ML_log_confac
  READS:    ML_BSSN::ML_log_confacrhs
  READS:    ML_BSSN::ML_metric
  READS:    ML_BSSN::ML_metricrhs
  READS:    ML_BSSN::ML_shift
  READS:    ML_BSSN::ML_shiftrhs
  READS:    ML_BSSN::ML_trace_curv
  READS:    ML_BSSN::ML_trace_curvrhs
  WRITES:   ML_BSSN::ML_curvrhs
  WRITES:   ML_BSSN::ML_dtlapserhs
  WRITES:   ML_BSSN::ML_dtshiftrhs
  WRITES:   ML_BSSN::ML_Gammarhs
  WRITES:   ML_BSSN::ML_lapserhs
  WRITES:   ML_BSSN::ML_log_confacrhs
  WRITES:   ML_BSSN::ML_metricrhs
  WRITES:   ML_BSSN::ML_shiftrhs
  WRITES:   ML_BSSN::ML_trace_curvrhs
} "ML_BSSN_Advect"

schedule CAKERNEL_Launch_ML_BSSN_InitRHS AT analysis BEFORE ML_BSSN_evolCalcGroup
{
  LANG: C
  # TAGS: Device=1
  WRITES:   ML_BSSN::ML_curvrhs
  WRITES:   ML_BSSN::ML_dtlapserhs
  WRITES:   ML_BSSN::ML_dtshiftrhs
  WRITES:   ML_BSSN::ML_Gammarhs
  WRITES:   ML_BSSN::ML_lapserhs
  WRITES:   ML_BSSN::ML_log_confacrhs
  WRITES:   ML_BSSN::ML_metricrhs
  WRITES:   ML_BSSN::ML_shiftrhs
  WRITES:   ML_BSSN::ML_trace_curvrhs
} "ML_BSSN_InitRHS"


if (CCTK_EQUALS(my_rhs_boundary_condition, "static"))
{
  schedule CAKERNEL_Launch_ML_BSSN_RHSStaticBoundary at EVOL after  ML_BSSN_evolCalcGroup
  {
    LANG: C
    SYNC: ML_curvrhs
    SYNC: ML_dtlapserhs
    SYNC: ML_dtshiftrhs
    SYNC: ML_Gammarhs
    SYNC: ML_lapserhs
    SYNC: ML_log_confacrhs
    SYNC: ML_metricrhs
    SYNC: ML_shiftrhs
    SYNC: ML_trace_curvrhs
    # TAGS: Device=1
    WRITES:   ML_BSSN::ML_curvrhs
    WRITES:   ML_BSSN::ML_dtlapserhs
    WRITES:   ML_BSSN::ML_dtshiftrhs
    WRITES:   ML_BSSN::ML_Gammarhs
    WRITES:   ML_BSSN::ML_lapserhs
    WRITES:   ML_BSSN::ML_log_confacrhs
    WRITES:   ML_BSSN::ML_metricrhs
    WRITES:   ML_BSSN::ML_shiftrhs
    WRITES:   ML_BSSN::ML_trace_curvrhs
  } "ML_BSSN_RHSStaticBoundary"
}

schedule CAKERNEL_Launch_ML_BSSN_enforce IN MoL_PostStepModify
{
  LANG: C
  # TAGS: Device=1
  READS:    ML_BSSN::ML_curv
  READS:    ML_BSSN::ML_lapse
  READS:    ML_BSSN::ML_metric
  WRITES:   ML_BSSN::ML_curv
  WRITES:   ML_BSSN::ML_lapse
} "ML_BSSN_enforce"


if (CCTK_EQUALS(my_boundary_condition, "Minkowski"))
{
  schedule CAKERNEL_Launch_ML_BSSN_boundary IN MoL_PostStep
  {
    LANG: C
    # TAGS: Device=1
    WRITES:   ML_BSSN::ML_curv
    WRITES:   ML_BSSN::ML_dtlapse
    WRITES:   ML_BSSN::ML_dtshift
    WRITES:   ML_BSSN::ML_Gamma
    WRITES:   ML_BSSN::ML_lapse
    WRITES:   ML_BSSN::ML_log_confac
    WRITES:   ML_BSSN::ML_metric
    WRITES:   ML_BSSN::ML_shift
    WRITES:   ML_BSSN::ML_trace_curv
  } "ML_BSSN_boundary"
}

schedule ML_BSSN_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: ML_curv
  SYNC: ML_dtlapse
  SYNC: ML_dtshift
  SYNC: ML_Gamma
  SYNC: ML_lapse
  SYNC: ML_log_confac
  SYNC: ML_metric
  SYNC: ML_shift
  SYNC: ML_trace_curv
} "select boundary conditions"

schedule ML_BSSN_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule group ApplyBCs as ML_BSSN_ApplyBCs in MoL_PostStep after ML_BSSN_SelectBoundConds
{
  # no language specified
} "Apply boundary conditions controlled by thorn Boundary"


############################################################
#CAKERNEL AUTO GENERATED PART. DO NOT EDIT BELOW THIS POINT#
############################################################

schedule CaKernel_InitDevice in CCTK_BASEGRID
      {
        LANG: C
      } "Initialize CUDA Device"
schedule group CaKernel_InitFunctions in CCTK_BASEGRID after CaKernel_AllocDevMem
      {
      } "Group to initialize all the kernels"
schedule CaKernel_AllocDevMem in CCTK_BASEGRID after CaKernel_InitDevice
      {
          LANG: C
      }"Allocate memory for variables on devices"
schedule CaKernel_FreeDevMem in CCTK_SHUTDOWN
      {
          LANG: C
      }"Deallocate memory for variables on devices"

